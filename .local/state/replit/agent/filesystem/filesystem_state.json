{"file_contents":{"design_guidelines.md":{"content":"# Bakery Management Dashboard - Design Guidelines\n\n## Design Approach: Enterprise Dashboard System\n\n**Selected System**: Material Design 3 with dashboard optimizations\n**Rationale**: Data-dense operational tool requiring clear information hierarchy, excellent form controls, and real-time status indicators. Material Design provides robust components for inventory management, alerts, and data visualization while maintaining mobile responsiveness for on-the-go employees.\n\n**Key Principles**:\n- Clarity over decoration - every element serves a functional purpose\n- Quick scanning - employees should find critical info in seconds\n- Status-first - alerts and warnings must be immediately visible\n- Touch-optimized - designed for tablet and mobile use in bakery environment\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode (Primary):**\n- Primary: 211 100% 43% (Deep Blue - trust, reliability)\n- Success: 142 71% 45% (Green - healthy stock)\n- Warning: 38 92% 50% (Amber - approaching expiration)\n- Critical: 0 84% 60% (Red - expired/out of stock)\n- Surface: 0 0% 98% (Light gray backgrounds)\n- Text Primary: 220 13% 18%\n- Text Secondary: 220 9% 46%\n\n**Dark Mode:**\n- Primary: 211 100% 60%\n- Success: 142 71% 55%\n- Warning: 38 92% 60%\n- Critical: 0 84% 70%\n- Surface: 220 13% 12%\n- Surface Elevated: 220 13% 18%\n- Text Primary: 0 0% 95%\n- Text Secondary: 220 9% 70%\n\n### B. Typography\n\n**Font Stack**: \n- Primary: 'Noto Sans Thai', 'Inter', system-ui, sans-serif (excellent Thai language support)\n- Monospace: 'JetBrains Mono', monospace (for numerical data, timestamps)\n\n**Scale**:\n- H1 Dashboard Title: 2.5rem / font-bold\n- H2 Section Headers: 1.875rem / font-semibold\n- H3 Card Titles: 1.25rem / font-semibold\n- Body: 1rem / font-normal\n- Small/Caption: 0.875rem / font-normal\n- Data/Numbers: 1.125rem / font-medium / monospace\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16\n- Component padding: p-4 to p-6\n- Section spacing: gap-6 to gap-8\n- Card spacing: p-6\n- Form field gaps: gap-4\n- Grid gutters: gap-6\n\n**Grid System**:\n- Mobile: Single column stack\n- Tablet: 2-column for cards, single for forms\n- Desktop: 3-column dashboard grid with sidebar\n\n---\n\n## D. Component Library\n\n### Navigation & Layout\n\n**Top Bar** (sticky, h-16):\n- Branch selector dropdown (left)\n- Current date/time with edit icon (center)\n- Alert bell icon with badge count (right)\n- Profile menu (far right)\n- Background: Surface elevated with subtle bottom border\n\n**Bottom Navigation** (mobile only, fixed):\n- 4 main sections: Dashboard, Stock Entry, Hourly Check, Alerts\n- Icon + label format\n- Active state with primary color fill\n\n### Dashboard Cards\n\n**Stat Cards**:\n- Large number display (3rem, monospace)\n- Label below (0.875rem, secondary text)\n- Icon top-right corner\n- Subtle shadow, rounded-lg\n- Color-coded left border (4px) for status indication\n\n**Forecast Card**:\n- Bar chart visualization showing hourly demand\n- Current hour highlighted\n- Gridlines for easy reading\n- Legend below chart\n\n**Alert List Card**:\n- Grouped by severity (Critical → Warning → Info)\n- Each alert: icon + message + timestamp + action button\n- Color-coded left accent bar\n- Dismissible with swipe gesture (mobile)\n\n### Forms & Input\n\n**Date/Time Adjuster**:\n- Large, touch-friendly datetime picker\n- Current vs adjusted time comparison view\n- Confirm/cancel buttons prominent\n\n**Ingredient Entry Form**:\n- Two-tab interface: \"Yesterday's Remaining\" | \"Today's Received\"\n- Searchable ingredient dropdown with images\n- Quantity input (large touch targets, +/- buttons)\n- Expiry date picker for new stock\n- Batch number input (optional field)\n- Running total display at bottom\n- Submit button (primary, full-width on mobile)\n\n**Hourly Stock Check**:\n- Product grid with images\n- Quick increment/decrement buttons\n- Current vs counted comparison\n- Auto-calculated variance display\n- Promotion suggestions appear inline for low-stock items\n\n### Data Display\n\n**Inventory Table**:\n- Sortable columns: Name, Quantity, Expiry, Location\n- Color-coded rows based on expiry proximity:\n  - Green: >7 days\n  - Amber: 3-7 days\n  - Red: <3 days\n- Quick action buttons: Use, Adjust, Move\n- Sticky header on scroll\n\n**Production Recommendation Panel**:\n- Side-by-side comparison: Forecast vs Current Stock\n- Suggested production quantity (calculated, editable)\n- Ingredient availability check (green check/red X)\n- \"Start Production\" CTA button\n\n### Alerts & Notifications\n\n**Toast Notifications**:\n- Slide from top-right (desktop) or top (mobile)\n- Auto-dismiss after 5s (info), 10s (warning), manual (critical)\n- Icon + message + action link\n- Sound alert for critical notifications\n\n**Hourly Reminder**:\n- Full-screen modal (cannot dismiss without action)\n- Large clock icon\n- \"Time to check stock\" message\n- Direct link to stock check form\n- Snooze option (15 min only, once)\n\n**Expiration Alerts**:\n- Dedicated alert page accessible from bell icon\n- Grouped by time: \"Expiring Today\" | \"This Week\" | \"Next Week\"\n- Each item shows: image, name, quantity, exact expiry, suggested action\n\n---\n\n## E. Responsive Breakpoints\n\n- Mobile: < 768px (single column, bottom nav)\n- Tablet: 768px - 1024px (2-column cards, side drawer)\n- Desktop: > 1024px (3-column, persistent sidebar)\n\n---\n\n## Visual Enhancements\n\n**Micro-interactions**:\n- Button press: subtle scale down (0.98)\n- Card hover: slight elevation increase\n- Input focus: primary color border with glow\n- Success action: green checkmark animation\n\n**Loading States**:\n- Skeleton screens for data tables\n- Spinner for form submissions\n- Progressive loading for charts\n\n**Empty States**:\n- Friendly illustration (bakery-themed)\n- Clear message in Thai\n- Primary action button to get started\n\n---\n\n## Thai Language Considerations\n\n- Ensure adequate line-height (1.6) for Thai characters\n- Test all form labels and buttons with actual Thai text\n- Use Noto Sans Thai for optimal readability\n- Right-align numbers even in Thai context\n- Date format: DD/MM/YYYY (Thai convention)\n\n---\n\n## Accessibility\n\n- High contrast ratios (WCAG AAA where possible)\n- Touch targets minimum 44x44px\n- Keyboard navigation for all actions\n- Screen reader labels for icons\n- Dark mode as default (reduces eye strain in early morning bakery environment)\n- Haptic feedback on critical actions (mobile)","size_bytes":6343},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bakery Management Dashboard\n\n## Overview\n\nThis is a comprehensive bakery management system designed for real-time inventory tracking, production planning, and demand forecasting. The application serves bakery staff with an intuitive dashboard for managing ingredients, monitoring product stock, conducting hourly checks, and importing AI-generated demand forecasts. Built with a modern tech stack, it emphasizes operational efficiency with Thai language support and mobile-first design for bakery floor usage.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and dev server for fast HMR and optimized production builds\n- Wouter for lightweight client-side routing\n\n**UI Component System**\n- Radix UI primitives for accessible, unstyled components\n- shadcn/ui component library (New York style variant) with Material Design 3 influences\n- Tailwind CSS for utility-first styling with custom design tokens\n- CSS variables for theming with light/dark mode support\n\n**State Management & Data Fetching**\n- TanStack Query (React Query) for server state management, caching, and real-time updates\n- WebSocket (Socket.IO) integration for live stock updates and notifications\n- Local state with React hooks for UI-specific state\n\n**Design System**\n- Enterprise dashboard optimized for data-dense displays\n- Custom color palette with HSL variables for semantic colors (success, warning, critical)\n- Thai language typography using 'Noto Sans Thai' and 'Inter' fonts\n- Monospace 'JetBrains Mono' for numerical data display\n- Touch-optimized controls for tablet/mobile use in bakery environments\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js with TypeScript for REST API endpoints\n- HTTP server with Socket.IO for real-time bidirectional communication\n- Middleware for request logging, JSON parsing, and error handling\n\n**API Design Pattern**\n- RESTful endpoints organized by resource (`/api/branches`, `/api/ingredients`, `/api/products`, etc.)\n- WebSocket rooms for branch-specific real-time updates\n- Zod schemas for request validation\n\n**Database Layer**\n- Drizzle ORM for type-safe database operations\n- PostgreSQL via Neon serverless with connection pooling\n- Schema-first design with shared TypeScript types between client and server\n\n**Real-time Features**\n- Socket.IO event system for:\n  - Stock level updates (`stock-updated`, `product-stock-updated`)\n  - Hourly check reminders\n  - Branch-specific rooms for targeted updates\n\n### Data Storage Solutions\n\n**Database Schema (PostgreSQL)**\n- `users` - Authentication and user management\n- `branches` - Store location data\n- `ingredients` - Master ingredient catalog with units and images\n- `ingredient_stock` - Per-branch ingredient inventory with expiry tracking\n- `bakery_products` - Product catalog with shelf life specifications\n- `product_stock` - Real-time product inventory by branch\n- `hourly_checks` - Historical stock count records\n- `demand_forecasts` - AI-generated demand predictions (hourly)\n- `branch_forecasts` - Branch-level forecast aggregations\n- `product_forecasts` - Product-specific forecast details with accuracy metrics\n\n**Key Features**\n- Batch number tracking for ingredients\n- Expiry date monitoring with \"days until expiry\" calculations\n- Production timestamp tracking for shelf-life management\n- Yesterday/today stock differentiation for opening inventory\n\n### External Dependencies\n\n**Core Libraries**\n- `@neondatabase/serverless` - Serverless PostgreSQL client for Neon\n- `drizzle-orm` - Type-safe ORM with PostgreSQL dialect\n- `drizzle-kit` - Database migration and schema management tools\n- `socket.io` & `socket.io-client` - Real-time WebSocket communication\n- `ws` - WebSocket library for Neon serverless compatibility\n\n**UI Component Libraries**\n- `@radix-ui/*` - 20+ accessible component primitives (dialogs, dropdowns, etc.)\n- `recharts` - Data visualization for forecast charts\n- `date-fns` - Date manipulation with Thai locale support\n- `lucide-react` - Icon library\n- `class-variance-authority` - Type-safe component variants\n- `tailwind-merge` & `clsx` - Conditional className utilities\n\n**Form & Validation**\n- `react-hook-form` - Performant form state management\n- `@hookform/resolvers` - Form validation resolvers\n- `zod` - Schema validation for forms and API requests\n- `drizzle-zod` - Automatic Zod schema generation from Drizzle schemas\n\n**Developer Tools**\n- `@replit/vite-plugin-*` - Replit-specific development plugins\n- `tsx` - TypeScript execution for development\n- `esbuild` - Fast bundler for production server code\n\n**Third-party Integrations**\n- Neon Database - Serverless PostgreSQL hosting\n- Web Notifications API - Browser push notifications for hourly check reminders\n- Session management via `connect-pg-simple` for PostgreSQL-backed sessions\n\n**Forecast System**\n- External Python-based hybrid forecasting model (ARIMA + LSTM + Prophet)\n- JSON import endpoint for batch forecast data\n- Accuracy tracking and model type attribution per prediction","size_bytes":5169},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success) / <alpha-value>)\",\n          foreground: \"hsl(var(--success-foreground) / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning) / <alpha-value>)\",\n          foreground: \"hsl(var(--warning-foreground) / <alpha-value>)\",\n        },\n        critical: {\n          DEFAULT: \"hsl(var(--critical) / <alpha-value>)\",\n          foreground: \"hsl(var(--critical-foreground) / <alpha-value>)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4533},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\n\nconst addIngredientStockSchema = z.object({\n  ingredientId: z.string(),\n  branchId: z.string(),\n  quantity: z.number(),\n  expiryDate: z.string(),\n  batchNumber: z.string().optional(),\n  receivedDate: z.string(),\n  isFromYesterday: z.boolean(),\n});\n\nconst hourlyCheckSchema = z.object({\n  branchId: z.string(),\n  checks: z.array(\n    z.object({\n      productId: z.string(),\n      countedQuantity: z.number(),\n      systemQuantity: z.number(),\n    })\n  ),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"],\n    },\n  });\n\n  io.on(\"connection\", (socket) => {\n    console.log(\"Client connected:\", socket.id);\n\n    socket.on(\"join-branch\", (branchId: string) => {\n      socket.join(`branch-${branchId}`);\n      console.log(`Socket ${socket.id} joined branch-${branchId}`);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Client disconnected:\", socket.id);\n    });\n  });\n\n  app.get(\"/api/branches\", async (req: Request, res: Response) => {\n    try {\n      const branches = await storage.getBranches();\n      res.json(branches);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch branches\" });\n    }\n  });\n\n  app.get(\"/api/ingredients\", async (req: Request, res: Response) => {\n    try {\n      const ingredients = await storage.getIngredients();\n      res.json(ingredients);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ingredients\" });\n    }\n  });\n\n  app.get(\"/api/ingredients/stock/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const { branchId } = req.params;\n      const stock = await storage.getIngredientStock(branchId);\n\n      const today = new Date();\n      const stockWithExpiry = stock.map((s) => {\n        const expiryDate = new Date(s.expiryDate);\n        const daysUntilExpiry = Math.ceil(\n          (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        return {\n          id: s.id,\n          ingredientId: s.ingredientId,\n          branchId: s.branchId,\n          name: s.ingredient.name,\n          unit: s.ingredient.unit,\n          quantity: parseFloat(s.quantity),\n          expiryDate: s.expiryDate,\n          batchNumber: s.batchNumber,\n          receivedDate: s.receivedDate,\n          isFromYesterday: s.isFromYesterday,\n          daysUntilExpiry,\n        };\n      });\n\n      stockWithExpiry.sort((a, b) => {\n        if (a.isFromYesterday !== b.isFromYesterday) {\n          return a.isFromYesterday ? -1 : 1;\n        }\n        return new Date(a.receivedDate).getTime() - new Date(b.receivedDate).getTime();\n      });\n\n      res.json(stockWithExpiry);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ingredient stock\" });\n    }\n  });\n\n  app.get(\"/api/ingredients/expiring/:branchId/:days\", async (req: Request, res: Response) => {\n    try {\n      const { branchId, days } = req.params;\n      const stock = await storage.getIngredientStockExpiringSoon(branchId, parseInt(days));\n\n      const today = new Date();\n      const alerts = stock.map((s) => {\n        const expiryDate = new Date(s.expiryDate);\n        const daysUntilExpiry = Math.ceil(\n          (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n        );\n\n        let suggestedAction = \"ติดตามการใช้งาน\";\n        if (daysUntilExpiry === 0) {\n          suggestedAction = `ใช้ทันที - ผลิต${s.ingredient.name}`;\n        } else if (daysUntilExpiry <= 1) {\n          suggestedAction = \"ใช้ในการผลิตวันนี้\";\n        } else if (daysUntilExpiry <= 3) {\n          suggestedAction = `วางแผนใช้ภายใน ${daysUntilExpiry} วัน`;\n        }\n\n        return {\n          id: s.id,\n          ingredientName: s.ingredient.name,\n          quantity: parseFloat(s.quantity),\n          unit: s.ingredient.unit,\n          expiryDate: s.expiryDate,\n          daysUntilExpiry,\n          branch: branchId,\n          suggestedAction,\n        };\n      });\n\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expiring ingredients\" });\n    }\n  });\n\n  app.post(\"/api/ingredients/stock\", async (req: Request, res: Response) => {\n    try {\n      const validatedData = addIngredientStockSchema.parse(req.body);\n      const stock = await storage.addIngredientStock({\n        ...validatedData,\n        quantity: validatedData.quantity.toString(),\n        batchNumber: validatedData.batchNumber || null,\n      });\n\n      io.to(`branch-${validatedData.branchId}`).emit(\"stock-updated\", {\n        type: \"ingredient-added\",\n        data: stock,\n      });\n\n      res.json(stock);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to add ingredient stock\" });\n      }\n    }\n  });\n\n  app.post(\"/api/ingredients/stock/batch\", async (req: Request, res: Response) => {\n    try {\n      const { entries, type, branchId } = req.body;\n\n      const stocks = await Promise.all(\n        entries.map(async (entry: any) => {\n          return await storage.addIngredientStock({\n            ingredientId: entry.ingredientId,\n            branchId,\n            quantity: entry.quantity.toString(),\n            expiryDate: entry.expiryDate,\n            batchNumber: entry.batchNumber || null,\n            receivedDate: new Date().toISOString().split(\"T\")[0],\n            isFromYesterday: type === \"yesterday\",\n          });\n        })\n      );\n\n      io.to(`branch-${branchId}`).emit(\"stock-updated\", {\n        type: \"batch-added\",\n        data: stocks,\n      });\n\n      res.json(stocks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to add ingredient stock batch\" });\n    }\n  });\n\n  app.get(\"/api/products\", async (req: Request, res: Response) => {\n    try {\n      const products = await storage.getBakeryProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/stock/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const { branchId } = req.params;\n      const stock = await storage.getProductStock(branchId);\n      res.json(stock);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product stock\" });\n    }\n  });\n\n  app.post(\"/api/hourly-check\", async (req: Request, res: Response) => {\n    try {\n      const validatedData = hourlyCheckSchema.parse(req.body);\n      const checkTime = new Date();\n\n      const checks = await Promise.all(\n        validatedData.checks.map(async (check) => {\n          const variance = check.countedQuantity - check.systemQuantity;\n\n          const hourlyCheck = await storage.addHourlyCheck({\n            branchId: validatedData.branchId,\n            productId: check.productId,\n            checkTime: checkTime.toISOString(),\n            countedQuantity: check.countedQuantity,\n            systemQuantity: check.systemQuantity,\n            variance,\n          });\n\n          const productStocks = await storage.getProductStock(validatedData.branchId);\n          const productStock = productStocks.find((s) => s.productId === check.productId);\n\n          if (productStock) {\n            await storage.updateProductStock(productStock.id, check.countedQuantity);\n          }\n\n          return hourlyCheck;\n        })\n      );\n\n      io.to(`branch-${validatedData.branchId}`).emit(\"stock-updated\", {\n        type: \"hourly-check-completed\",\n        data: checks,\n      });\n\n      const recommendations = validatedData.checks\n        .filter((check) => check.countedQuantity > 10 && check.countedQuantity < 20)\n        .map((check) => ({\n          productId: check.productId,\n          discount: 10,\n          reason: \"สต๊อกเหลือน้อย - แนะนำให้ส่วนลด 10%\",\n        }));\n\n      if (recommendations.length > 0) {\n        io.to(`branch-${validatedData.branchId}`).emit(\"promotion-recommendation\", {\n          recommendations,\n        });\n      }\n\n      res.json({ checks, recommendations });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to process hourly check\" });\n      }\n    }\n  });\n\n  app.get(\"/api/forecast/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const hours = Array.from({ length: 12 }, (_, i) => i + 8);\n      const mockData = hours.map((hour) => ({\n        hour: `${hour.toString().padStart(2, \"0\")}:00`,\n        predicted: Math.floor(Math.random() * 50) + 30,\n        actual: hour <= new Date().getHours() ? Math.floor(Math.random() * 50) + 25 : undefined,\n      }));\n      res.json(mockData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch forecast\" });\n    }\n  });\n\n  app.get(\"/api/production-plan/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const { branchId } = req.params;\n      const products = await storage.getBakeryProducts();\n      const productStock = await storage.getProductStock(branchId);\n\n      const recommendations = products.map((product) => {\n        const stock = productStock.find((s) => s.productId === product.id);\n        const currentStock = stock?.quantity || 0;\n        const forecastDemand = Math.floor(Math.random() * 30) + 20;\n        const suggestedProduction = Math.max(0, forecastDemand - currentStock);\n\n        return {\n          id: product.id,\n          name: product.name,\n          currentStock,\n          forecastDemand,\n          suggestedProduction,\n          ingredientsAvailable: Math.random() > 0.2,\n          shelfLifeHours: product.shelfLifeHours,\n        };\n      });\n\n      res.json(recommendations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch production plan\" });\n    }\n  });\n\n  app.get(\"/api/stats/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const { branchId } = req.params;\n      \n      const ingredientStock = await storage.getIngredientStock(branchId);\n      const expiringStock = await storage.getIngredientStockExpiringSoon(branchId, 3);\n      const productStock = await storage.getProductStock(branchId);\n\n      const totalIngredients = ingredientStock.length;\n      const expiringCount = expiringStock.length;\n      const totalProducts = productStock.reduce((sum, s) => sum + s.quantity, 0);\n\n      res.json({\n        totalIngredients,\n        expiringCount,\n        totalProducts,\n        salesAmount: Math.floor(Math.random() * 10000) + 35000,\n        salesTrend: Math.floor(Math.random() * 20) + 5,\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.post(\"/api/forecasts/import\", async (req: Request, res: Response) => {\n    try {\n      const { forecastDate, branches } = req.body;\n\n      const importedForecasts = [];\n      \n      for (const branch of branches) {\n        const branchForecast = await storage.addBranchForecast({\n          branchId: branch.branchId,\n          branchName: branch.branchName,\n          forecastDate,\n          totalForecast: branch.totalForecast,\n          accuracy: branch.accuracy ? branch.accuracy.toString() : null,\n        });\n\n        for (const product of branch.products) {\n          await storage.addProductForecast({\n            branchForecastId: branchForecast.id,\n            productId: product.productId || null,\n            productCode: product.productCode,\n            productName: product.productName,\n            forecastQuantity: product.forecastQuantity,\n            minQuantity: product.minQuantity,\n            maxQuantity: product.maxQuantity,\n            accuracy: product.accuracy ? product.accuracy.toString() : null,\n            modelType: product.modelType,\n          });\n        }\n\n        importedForecasts.push(branchForecast);\n      }\n\n      io.emit(\"forecast-updated\", { date: forecastDate });\n\n      res.json({\n        success: true,\n        count: importedForecasts.length,\n        forecasts: importedForecasts,\n      });\n    } catch (error) {\n      console.error(\"Failed to import forecasts:\", error);\n      res.status(500).json({ error: \"Failed to import forecasts\" });\n    }\n  });\n\n  app.get(\"/api/forecasts/:date\", async (req: Request, res: Response) => {\n    try {\n      const { date } = req.params;\n      const forecasts = await storage.getBranchForecasts(date);\n\n      const forecastsWithProducts = await Promise.all(\n        forecasts.map(async (forecast) => {\n          const products = await storage.getProductForecasts(forecast.id);\n          return { ...forecast, products };\n        })\n      );\n\n      res.json(forecastsWithProducts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch forecasts\" });\n    }\n  });\n\n  app.get(\"/api/forecasts/:branchId/:date\", async (req: Request, res: Response) => {\n    try {\n      const { branchId, date } = req.params;\n      const forecast = await storage.getBranchForecast(branchId, date);\n\n      if (!forecast) {\n        return res.status(404).json({ error: \"Forecast not found\" });\n      }\n\n      res.json(forecast);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch forecast\" });\n    }\n  });\n\n  app.get(\"/api/today-forecast/:branchId\", async (req: Request, res: Response) => {\n    try {\n      const { branchId } = req.params;\n      const today = new Date().toISOString().split(\"T\")[0];\n      \n      const forecast = await storage.getBranchForecast(branchId, today);\n      const productStock = await storage.getProductStock(branchId);\n      const products = await storage.getBakeryProducts();\n\n      const now = new Date();\n      \n      const forecastWithPromotion = forecast ? forecast.products.map((productForecast) => {\n        const stock = productStock.find((s) => s.productId === productForecast.productId);\n        const product = products.find((p) => p.id === productForecast.productId);\n        \n        let hoursOnShelf = 0;\n        let needsPromotion = false;\n        \n        if (stock && product) {\n          const productionTime = new Date(stock.productionTime);\n          hoursOnShelf = (now.getTime() - productionTime.getTime()) / (1000 * 60 * 60);\n          needsPromotion = hoursOnShelf > 3;\n        }\n\n        return {\n          ...productForecast,\n          currentStock: stock?.quantity || 0,\n          hoursOnShelf: Math.round(hoursOnShelf * 10) / 10,\n          needsPromotion,\n          shelfLifeHours: product?.shelfLifeHours || 0,\n          minQuantity: productForecast.minQuantity,\n          maxQuantity: productForecast.maxQuantity,\n        };\n      }) : [];\n\n      res.json({\n        date: today,\n        branchId,\n        branchName: forecast?.branchName || \"\",\n        totalForecast: forecast?.totalForecast || 0,\n        accuracy: forecast?.accuracy || null,\n        products: forecastWithPromotion,\n      });\n    } catch (error) {\n      console.error(\"Failed to fetch today's forecast:\", error);\n      res.status(500).json({ error: \"Failed to fetch today's forecast\" });\n    }\n  });\n\n  app.get(\"/api/optimization/production-plans\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const plans = await storage.getProductionPlans(branchId);\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch production plans\" });\n    }\n  });\n\n  app.get(\"/api/optimization/promotions\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const promotions = await storage.getPromotionRecommendations(branchId);\n      res.json(promotions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch promotion recommendations\" });\n    }\n  });\n\n  app.get(\"/api/optimization/pricing-schedules\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const schedules = await storage.getDynamicPricingSchedules(branchId);\n      res.json(schedules);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pricing schedules\" });\n    }\n  });\n\n  app.get(\"/api/optimization/shelf-life-alerts\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const alerts = await storage.getShelfLifeAlerts(branchId);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch shelf life alerts\" });\n    }\n  });\n\n  app.get(\"/api/optimization/daily-actions\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const actions = await storage.getDailyActionPlans(branchId);\n      res.json(actions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch daily action plans\" });\n    }\n  });\n\n  app.get(\"/api/reports/waste-analysis\", async (req: Request, res: Response) => {\n    try {\n      const branchId = req.query.branchId as string | undefined;\n      const analysis = await storage.getBranchWasteAnalysis(branchId);\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch waste analysis\" });\n    }\n  });\n\n  app.get(\"/api/reports/ingredient-demand\", async (req: Request, res: Response) => {\n    try {\n      const demand = await storage.getIngredientDemandForecasts();\n      res.json(demand);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ingredient demand forecasts\" });\n    }\n  });\n\n  app.get(\"/api/reports/product-recipes/:sku?\", async (req: Request, res: Response) => {\n    try {\n      const { sku } = req.params;\n      const recipes = await storage.getProductRecipes(sku);\n      res.json(recipes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product recipes\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":18392},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Branch,\n  type Ingredient,\n  type IngredientStock,\n  type BakeryProduct,\n  type ProductStock,\n  type HourlyCheck,\n  type DemandForecast,\n  type BranchForecast,\n  type ProductForecast,\n  type ProductRecipe,\n  type ProductionPlan,\n  type PromotionRecommendation,\n  type DynamicPricingSchedule,\n  type ShelfLifeAlert,\n  type DailyActionPlan,\n  type BranchWasteAnalysis,\n  type IngredientDemandForecast,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getBranches(): Promise<Branch[]>;\n  getBranch(id: string): Promise<Branch | undefined>;\n  createBranch(branch: Branch): Promise<Branch>;\n\n  getIngredients(): Promise<Ingredient[]>;\n  getIngredient(id: string): Promise<Ingredient | undefined>;\n  createIngredient(ingredient: Omit<Ingredient, \"id\">): Promise<Ingredient>;\n\n  getIngredientStock(branchId: string): Promise<(IngredientStock & { ingredient: Ingredient })[]>;\n  getIngredientStockExpiringSoon(branchId: string, days: number): Promise<(IngredientStock & { ingredient: Ingredient })[]>;\n  addIngredientStock(stock: Omit<IngredientStock, \"id\">): Promise<IngredientStock>;\n  updateIngredientStock(id: string, quantity: number): Promise<IngredientStock | undefined>;\n  deleteIngredientStock(id: string): Promise<boolean>;\n\n  getBakeryProducts(): Promise<BakeryProduct[]>;\n  getBakeryProduct(id: string): Promise<BakeryProduct | undefined>;\n  createBakeryProduct(product: Omit<BakeryProduct, \"id\">): Promise<BakeryProduct>;\n\n  getProductStock(branchId: string): Promise<(ProductStock & { product: BakeryProduct })[]>;\n  addProductStock(stock: Omit<ProductStock, \"id\">): Promise<ProductStock>;\n  updateProductStock(id: string, quantity: number): Promise<ProductStock | undefined>;\n\n  addHourlyCheck(check: Omit<HourlyCheck, \"id\">): Promise<HourlyCheck>;\n  getHourlyChecks(branchId: string, date: Date): Promise<HourlyCheck[]>;\n\n  getDemandForecasts(branchId: string, date: Date): Promise<DemandForecast[]>;\n  addDemandForecast(forecast: Omit<DemandForecast, \"id\">): Promise<DemandForecast>;\n\n  getBranchForecasts(date: string): Promise<BranchForecast[]>;\n  getBranchForecast(branchId: string, date: string): Promise<(BranchForecast & { products: ProductForecast[] }) | undefined>;\n  addBranchForecast(forecast: Omit<BranchForecast, \"id\" | \"createdAt\">): Promise<BranchForecast>;\n  addProductForecast(forecast: Omit<ProductForecast, \"id\">): Promise<ProductForecast>;\n  getProductForecasts(branchForecastId: string): Promise<ProductForecast[]>;\n\n  getProductRecipes(sku?: string): Promise<ProductRecipe[]>;\n  getProductionPlans(branchId?: string): Promise<ProductionPlan[]>;\n  getPromotionRecommendations(branchId?: string): Promise<PromotionRecommendation[]>;\n  getDynamicPricingSchedules(branchId?: string): Promise<DynamicPricingSchedule[]>;\n  getShelfLifeAlerts(branchId?: string): Promise<ShelfLifeAlert[]>;\n  getDailyActionPlans(branchId?: string): Promise<DailyActionPlan[]>;\n  getBranchWasteAnalysis(branchId?: string): Promise<BranchWasteAnalysis[]>;\n  getIngredientDemandForecasts(): Promise<IngredientDemandForecast[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private branches: Map<string, Branch>;\n  private ingredients: Map<string, Ingredient>;\n  private ingredientStock: Map<string, IngredientStock>;\n  private bakeryProducts: Map<string, BakeryProduct>;\n  private productStock: Map<string, ProductStock>;\n  private hourlyChecks: Map<string, HourlyCheck>;\n  private demandForecasts: Map<string, DemandForecast>;\n  private branchForecasts: Map<string, BranchForecast>;\n  private productForecasts: Map<string, ProductForecast>;\n\n  constructor() {\n    this.users = new Map();\n    this.branches = new Map();\n    this.ingredients = new Map();\n    this.ingredientStock = new Map();\n    this.bakeryProducts = new Map();\n    this.productStock = new Map();\n    this.hourlyChecks = new Map();\n    this.demandForecasts = new Map();\n    this.branchForecasts = new Map();\n    this.productForecasts = new Map();\n    this.seedData();\n  }\n\n  private seedData() {\n    const branches = [\n      { id: \"3510\", name: \"ชายหาดกมลา 1\", location: null },\n      { id: \"18469\", name: \"ราไวย์บีช\", location: null },\n      { id: \"18504\", name: \"ตลาดนัดสามกอง\", location: null },\n      { id: \"8732\", name: \"ราชพฤกษ์ (บางพลับ)\", location: null },\n      { id: \"15757\", name: \"The Bliss South Beach Patong\", location: null },\n      { id: \"9146\", name: \"หมู่บ้านพนาสนธิ์\", location: null },\n      { id: \"9922\", name: \"ศรีสุดา\", location: null },\n    ];\n    branches.forEach((b) => this.branches.set(b.id, b));\n\n    const ingredients = [\n      { id: randomUUID(), name: \"แป้งขนมปัง\", unit: \"กก.\", imageUrl: null },\n      { id: randomUUID(), name: \"นมสด\", unit: \"ลิตร\", imageUrl: null },\n      { id: randomUUID(), name: \"เนยสด\", unit: \"กก.\", imageUrl: null },\n      { id: randomUUID(), name: \"ไข่ไก่\", unit: \"ฟอง\", imageUrl: null },\n      { id: randomUUID(), name: \"น้ำตาล\", unit: \"กก.\", imageUrl: null },\n      { id: randomUUID(), name: \"เกลือ\", unit: \"กรัม\", imageUrl: null },\n    ];\n    ingredients.forEach((i) => this.ingredients.set(i.id, i));\n\n    const products = [\n      { id: randomUUID(), name: \"ครัวซองต์\", imageUrl: null, shelfLifeHours: 8 },\n      { id: randomUUID(), name: \"เดนิช\", imageUrl: null, shelfLifeHours: 12 },\n      { id: randomUUID(), name: \"บัตเตอร์เค้ก\", imageUrl: null, shelfLifeHours: 24 },\n      { id: randomUUID(), name: \"โดนัท\", imageUrl: null, shelfLifeHours: 16 },\n      { id: randomUUID(), name: \"คุกกี้เนย\", imageUrl: null, shelfLifeHours: 72 },\n      { id: randomUUID(), name: \"มัฟฟิน\", imageUrl: null, shelfLifeHours: 12 },\n    ];\n    products.forEach((p) => this.bakeryProducts.set(p.id, p));\n\n    const firstBranch = branches[0].id;\n    const flourId = Array.from(this.ingredients.values()).find((i) => i.name === \"แป้งขนมปัง\")?.id;\n    const milkId = Array.from(this.ingredients.values()).find((i) => i.name === \"นมสด\")?.id;\n    \n    if (flourId && milkId) {\n      const today = new Date();\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const nextWeek = new Date(today);\n      nextWeek.setDate(nextWeek.getDate() + 7);\n\n      this.ingredientStock.set(randomUUID(), {\n        id: randomUUID(),\n        ingredientId: flourId,\n        branchId: firstBranch,\n        quantity: \"25.5\",\n        expiryDate: tomorrow.toISOString().split(\"T\")[0],\n        batchNumber: \"BATCH-001\",\n        receivedDate: new Date(today.setDate(today.getDate() - 2)).toISOString().split(\"T\")[0],\n        isFromYesterday: false,\n      });\n\n      this.ingredientStock.set(randomUUID(), {\n        id: randomUUID(),\n        ingredientId: milkId,\n        branchId: firstBranch,\n        quantity: \"15\",\n        expiryDate: today.toISOString().split(\"T\")[0],\n        batchNumber: \"BATCH-002\",\n        receivedDate: new Date(today.setDate(today.getDate() - 1)).toISOString().split(\"T\")[0],\n        isFromYesterday: false,\n      });\n    }\n\n    const croissantId = Array.from(this.bakeryProducts.values()).find((p) => p.name === \"ครัวซองต์\")?.id;\n    const cookieId = Array.from(this.bakeryProducts.values()).find((p) => p.name === \"คุกกี้เนย\")?.id;\n    const muffinId = Array.from(this.bakeryProducts.values()).find((p) => p.name === \"มัฟฟิน\")?.id;\n    \n    if (croissantId && cookieId && muffinId) {\n      const now = new Date();\n      const fiveHoursAgo = new Date(now.getTime() - 5 * 60 * 60 * 1000);\n      const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);\n      const fourHoursAgo = new Date(now.getTime() - 4 * 60 * 60 * 1000);\n\n      this.productStock.set(randomUUID(), {\n        id: randomUUID(),\n        productId: croissantId,\n        branchId: firstBranch,\n        quantity: 8,\n        productionTime: fiveHoursAgo,\n      });\n\n      this.productStock.set(randomUUID(), {\n        id: randomUUID(),\n        productId: cookieId,\n        branchId: firstBranch,\n        quantity: 3,\n        productionTime: twoHoursAgo,\n      });\n\n      this.productStock.set(randomUUID(), {\n        id: randomUUID(),\n        productId: muffinId,\n        branchId: firstBranch,\n        quantity: 4,\n        productionTime: fourHoursAgo,\n      });\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getBranches(): Promise<Branch[]> {\n    return Array.from(this.branches.values());\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    return this.branches.get(id);\n  }\n\n  async createBranch(branch: Branch): Promise<Branch> {\n    this.branches.set(branch.id, branch);\n    return branch;\n  }\n\n  async getIngredients(): Promise<Ingredient[]> {\n    return Array.from(this.ingredients.values());\n  }\n\n  async getIngredient(id: string): Promise<Ingredient | undefined> {\n    return this.ingredients.get(id);\n  }\n\n  async createIngredient(ingredient: Omit<Ingredient, \"id\">): Promise<Ingredient> {\n    const id = randomUUID();\n    const newIngredient: Ingredient = { ...ingredient, id };\n    this.ingredients.set(id, newIngredient);\n    return newIngredient;\n  }\n\n  async getIngredientStock(branchId: string): Promise<(IngredientStock & { ingredient: Ingredient })[]> {\n    const stocks = Array.from(this.ingredientStock.values()).filter((s) => s.branchId === branchId);\n    return stocks.map((stock) => ({\n      ...stock,\n      ingredient: this.ingredients.get(stock.ingredientId)!,\n    })).filter((s) => s.ingredient);\n  }\n\n  async getIngredientStockExpiringSoon(\n    branchId: string,\n    days: number\n  ): Promise<(IngredientStock & { ingredient: Ingredient })[]> {\n    const stocks = await this.getIngredientStock(branchId);\n    const today = new Date();\n    return stocks.filter((stock) => {\n      const expiryDate = new Date(stock.expiryDate);\n      const daysUntilExpiry = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      return daysUntilExpiry <= days;\n    });\n  }\n\n  async addIngredientStock(stock: Omit<IngredientStock, \"id\">): Promise<IngredientStock> {\n    const id = randomUUID();\n    const newStock: IngredientStock = { ...stock, id };\n    this.ingredientStock.set(id, newStock);\n    return newStock;\n  }\n\n  async updateIngredientStock(id: string, quantity: number): Promise<IngredientStock | undefined> {\n    const stock = this.ingredientStock.get(id);\n    if (!stock) return undefined;\n    stock.quantity = quantity.toString();\n    this.ingredientStock.set(id, stock);\n    return stock;\n  }\n\n  async deleteIngredientStock(id: string): Promise<boolean> {\n    return this.ingredientStock.delete(id);\n  }\n\n  async getBakeryProducts(): Promise<BakeryProduct[]> {\n    return Array.from(this.bakeryProducts.values());\n  }\n\n  async getBakeryProduct(id: string): Promise<BakeryProduct | undefined> {\n    return this.bakeryProducts.get(id);\n  }\n\n  async createBakeryProduct(product: Omit<BakeryProduct, \"id\">): Promise<BakeryProduct> {\n    const id = randomUUID();\n    const newProduct: BakeryProduct = { ...product, id };\n    this.bakeryProducts.set(id, newProduct);\n    return newProduct;\n  }\n\n  async getProductStock(branchId: string): Promise<(ProductStock & { product: BakeryProduct })[]> {\n    const stocks = Array.from(this.productStock.values()).filter((s) => s.branchId === branchId);\n    return stocks.map((stock) => ({\n      ...stock,\n      product: this.bakeryProducts.get(stock.productId)!,\n    })).filter((s) => s.product);\n  }\n\n  async addProductStock(stock: Omit<ProductStock, \"id\">): Promise<ProductStock> {\n    const id = randomUUID();\n    const newStock: ProductStock = { ...stock, id };\n    this.productStock.set(id, newStock);\n    return newStock;\n  }\n\n  async updateProductStock(id: string, quantity: number): Promise<ProductStock | undefined> {\n    const stock = this.productStock.get(id);\n    if (!stock) return undefined;\n    stock.quantity = quantity;\n    this.productStock.set(id, stock);\n    return stock;\n  }\n\n  async addHourlyCheck(check: Omit<HourlyCheck, \"id\">): Promise<HourlyCheck> {\n    const id = randomUUID();\n    const newCheck: HourlyCheck = { ...check, id };\n    this.hourlyChecks.set(id, newCheck);\n    return newCheck;\n  }\n\n  async getHourlyChecks(branchId: string, date: Date): Promise<HourlyCheck[]> {\n    const dateStr = date.toISOString().split(\"T\")[0];\n    return Array.from(this.hourlyChecks.values()).filter((check) => {\n      const checkDate = new Date(check.checkTime).toISOString().split(\"T\")[0];\n      return check.branchId === branchId && checkDate === dateStr;\n    });\n  }\n\n  async getDemandForecasts(branchId: string, date: Date): Promise<DemandForecast[]> {\n    const dateStr = date.toISOString().split(\"T\")[0];\n    return Array.from(this.demandForecasts.values()).filter((forecast) => {\n      return forecast.branchId === branchId && forecast.forecastDate === dateStr;\n    });\n  }\n\n  async addDemandForecast(forecast: Omit<DemandForecast, \"id\">): Promise<DemandForecast> {\n    const id = randomUUID();\n    const newForecast: DemandForecast = { ...forecast, id };\n    this.demandForecasts.set(id, newForecast);\n    return newForecast;\n  }\n\n  async getBranchForecasts(date: string): Promise<BranchForecast[]> {\n    return Array.from(this.branchForecasts.values()).filter((f) => f.forecastDate === date);\n  }\n\n  async getBranchForecast(branchId: string, date: string): Promise<(BranchForecast & { products: ProductForecast[] }) | undefined> {\n    const branchForecast = Array.from(this.branchForecasts.values()).find(\n      (f) => f.branchId === branchId && f.forecastDate === date\n    );\n    if (!branchForecast) return undefined;\n\n    const products = await this.getProductForecasts(branchForecast.id);\n    return { ...branchForecast, products };\n  }\n\n  async addBranchForecast(forecast: Omit<BranchForecast, \"id\" | \"createdAt\">): Promise<BranchForecast> {\n    const id = randomUUID();\n    const newForecast: BranchForecast = { \n      ...forecast, \n      id,\n      createdAt: new Date(),\n    };\n    this.branchForecasts.set(id, newForecast);\n    return newForecast;\n  }\n\n  async addProductForecast(forecast: Omit<ProductForecast, \"id\">): Promise<ProductForecast> {\n    const id = randomUUID();\n    const newForecast: ProductForecast = { ...forecast, id };\n    this.productForecasts.set(id, newForecast);\n    return newForecast;\n  }\n\n  async getProductForecasts(branchForecastId: string): Promise<ProductForecast[]> {\n    return Array.from(this.productForecasts.values()).filter((f) => f.branchForecastId === branchForecastId);\n  }\n\n  async getProductRecipes(sku?: string): Promise<ProductRecipe[]> {\n    return [];\n  }\n\n  async getProductionPlans(branchId?: string): Promise<ProductionPlan[]> {\n    return [];\n  }\n\n  async getPromotionRecommendations(branchId?: string): Promise<PromotionRecommendation[]> {\n    return [];\n  }\n\n  async getDynamicPricingSchedules(branchId?: string): Promise<DynamicPricingSchedule[]> {\n    return [];\n  }\n\n  async getShelfLifeAlerts(branchId?: string): Promise<ShelfLifeAlert[]> {\n    return [];\n  }\n\n  async getDailyActionPlans(branchId?: string): Promise<DailyActionPlan[]> {\n    return [];\n  }\n\n  async getBranchWasteAnalysis(branchId?: string): Promise<BranchWasteAnalysis[]> {\n    return [];\n  }\n\n  async getIngredientDemandForecasts(): Promise<IngredientDemandForecast[]> {\n    return [];\n  }\n}\n\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\n\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({ where: eq(schema.users.id, id) });\n    return result;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({ where: eq(schema.users.username, username) });\n    return result;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(schema.users).values(user).returning();\n    return newUser;\n  }\n\n  async getBranches(): Promise<Branch[]> {\n    return db.query.branches.findMany();\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    return db.query.branches.findFirst({ where: eq(schema.branches.id, id) });\n  }\n\n  async createBranch(branch: Branch): Promise<Branch> {\n    const [newBranch] = await db.insert(schema.branches).values(branch).returning();\n    return newBranch;\n  }\n\n  async getIngredients(): Promise<Ingredient[]> {\n    return db.query.ingredients.findMany();\n  }\n\n  async getIngredient(id: string): Promise<Ingredient | undefined> {\n    return db.query.ingredients.findFirst({ where: eq(schema.ingredients.id, id) });\n  }\n\n  async createIngredient(ingredient: Omit<Ingredient, \"id\">): Promise<Ingredient> {\n    const [newIngredient] = await db.insert(schema.ingredients).values(ingredient).returning();\n    return newIngredient;\n  }\n\n  async getIngredientStock(branchId: string): Promise<(IngredientStock & { ingredient: Ingredient })[]> {\n    const result = await db.query.ingredientStock.findMany({\n      where: eq(schema.ingredientStock.branchId, branchId),\n      with: { ingredient: true },\n    });\n    return result as (IngredientStock & { ingredient: Ingredient })[];\n  }\n\n  async getIngredientStockExpiringSoon(branchId: string, days: number): Promise<(IngredientStock & { ingredient: Ingredient })[]> {\n    const today = new Date();\n    const futureDate = new Date(today);\n    futureDate.setDate(futureDate.getDate() + days);\n    \n    const result = await db.query.ingredientStock.findMany({\n      where: and(\n        eq(schema.ingredientStock.branchId, branchId),\n        lte(schema.ingredientStock.expiryDate, futureDate.toISOString().split('T')[0])\n      ),\n      with: { ingredient: true },\n    });\n    return result as (IngredientStock & { ingredient: Ingredient })[];\n  }\n\n  async addIngredientStock(stock: Omit<IngredientStock, \"id\">): Promise<IngredientStock> {\n    const [newStock] = await db.insert(schema.ingredientStock).values(stock).returning();\n    return newStock;\n  }\n\n  async updateIngredientStock(id: string, quantity: number): Promise<IngredientStock | undefined> {\n    const [updated] = await db.update(schema.ingredientStock)\n      .set({ quantity: quantity.toString() })\n      .where(eq(schema.ingredientStock.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteIngredientStock(id: string): Promise<boolean> {\n    const result = await db.delete(schema.ingredientStock).where(eq(schema.ingredientStock.id, id));\n    return true;\n  }\n\n  async getBakeryProducts(): Promise<BakeryProduct[]> {\n    return db.query.bakeryProducts.findMany();\n  }\n\n  async getBakeryProduct(id: string): Promise<BakeryProduct | undefined> {\n    return db.query.bakeryProducts.findFirst({ where: eq(schema.bakeryProducts.id, id) });\n  }\n\n  async createBakeryProduct(product: Omit<BakeryProduct, \"id\">): Promise<BakeryProduct> {\n    const [newProduct] = await db.insert(schema.bakeryProducts).values(product).returning();\n    return newProduct;\n  }\n\n  async getProductStock(branchId: string): Promise<(ProductStock & { product: BakeryProduct })[]> {\n    const result = await db.query.productStock.findMany({\n      where: eq(schema.productStock.branchId, branchId),\n      with: { product: true },\n    });\n    return result as (ProductStock & { product: BakeryProduct })[];\n  }\n\n  async addProductStock(stock: Omit<ProductStock, \"id\">): Promise<ProductStock> {\n    const [newStock] = await db.insert(schema.productStock).values(stock).returning();\n    return newStock;\n  }\n\n  async updateProductStock(id: string, quantity: number): Promise<ProductStock | undefined> {\n    const [updated] = await db.update(schema.productStock)\n      .set({ quantity })\n      .where(eq(schema.productStock.id, id))\n      .returning();\n    return updated;\n  }\n\n  async addHourlyCheck(check: Omit<HourlyCheck, \"id\">): Promise<HourlyCheck> {\n    const [newCheck] = await db.insert(schema.hourlyChecks).values(check).returning();\n    return newCheck;\n  }\n\n  async getHourlyChecks(branchId: string, date: Date): Promise<HourlyCheck[]> {\n    const dateStr = date.toISOString().split(\"T\")[0];\n    return db.query.hourlyChecks.findMany({\n      where: and(\n        eq(schema.hourlyChecks.branchId, branchId),\n        gte(schema.hourlyChecks.checkTime, dateStr)\n      ),\n    });\n  }\n\n  async getDemandForecasts(branchId: string, date: Date): Promise<DemandForecast[]> {\n    const dateStr = date.toISOString().split(\"T\")[0];\n    return db.query.demandForecasts.findMany({\n      where: and(\n        eq(schema.demandForecasts.branchId, branchId),\n        eq(schema.demandForecasts.forecastDate, dateStr)\n      ),\n    });\n  }\n\n  async addDemandForecast(forecast: Omit<DemandForecast, \"id\">): Promise<DemandForecast> {\n    const [newForecast] = await db.insert(schema.demandForecasts).values(forecast).returning();\n    return newForecast;\n  }\n\n  async getBranchForecasts(date: string): Promise<BranchForecast[]> {\n    return db.query.branchForecasts.findMany({\n      where: eq(schema.branchForecasts.forecastDate, date),\n    });\n  }\n\n  async getBranchForecast(branchId: string, date: string): Promise<(BranchForecast & { products: ProductForecast[] }) | undefined> {\n    const branchForecast = await db.query.branchForecasts.findFirst({\n      where: and(\n        eq(schema.branchForecasts.branchId, branchId),\n        eq(schema.branchForecasts.forecastDate, date)\n      ),\n      with: {\n        products: true,\n      },\n    });\n    if (!branchForecast) return undefined;\n    \n    const products = await this.getProductForecasts(branchForecast.id);\n    return { ...branchForecast, products };\n  }\n\n  async addBranchForecast(forecast: Omit<BranchForecast, \"id\" | \"createdAt\">): Promise<BranchForecast> {\n    const [newForecast] = await db.insert(schema.branchForecasts).values(forecast).returning();\n    return newForecast;\n  }\n\n  async addProductForecast(forecast: Omit<ProductForecast, \"id\">): Promise<ProductForecast> {\n    const [newForecast] = await db.insert(schema.productForecasts).values(forecast).returning();\n    return newForecast;\n  }\n\n  async getProductForecasts(branchForecastId: string): Promise<ProductForecast[]> {\n    return db.query.productForecasts.findMany({\n      where: eq(schema.productForecasts.branchForecastId, branchForecastId),\n    });\n  }\n\n  async getProductRecipes(sku?: string): Promise<ProductRecipe[]> {\n    if (sku) {\n      return db.query.productRecipes.findMany({\n        where: eq(schema.productRecipes.sku, sku),\n      });\n    }\n    return db.query.productRecipes.findMany();\n  }\n\n  async getProductionPlans(branchId?: string): Promise<ProductionPlan[]> {\n    if (branchId) {\n      return db.select().from(schema.productionPlans)\n        .where(sql`${schema.productionPlans.branch} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.productionPlans.findMany();\n  }\n\n  async getPromotionRecommendations(branchId?: string): Promise<PromotionRecommendation[]> {\n    if (branchId) {\n      return db.select().from(schema.promotionRecommendations)\n        .where(sql`${schema.promotionRecommendations.store} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.promotionRecommendations.findMany();\n  }\n\n  async getDynamicPricingSchedules(branchId?: string): Promise<DynamicPricingSchedule[]> {\n    if (branchId) {\n      return db.select().from(schema.dynamicPricingSchedules)\n        .where(sql`${schema.dynamicPricingSchedules.branch} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.dynamicPricingSchedules.findMany();\n  }\n\n  async getShelfLifeAlerts(branchId?: string): Promise<ShelfLifeAlert[]> {\n    if (branchId) {\n      return db.select().from(schema.shelfLifeAlerts)\n        .where(sql`${schema.shelfLifeAlerts.branch} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.shelfLifeAlerts.findMany();\n  }\n\n  async getDailyActionPlans(branchId?: string): Promise<DailyActionPlan[]> {\n    if (branchId) {\n      return db.select().from(schema.dailyActionPlans)\n        .where(sql`${schema.dailyActionPlans.branch} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.dailyActionPlans.findMany();\n  }\n\n  async getBranchWasteAnalysis(branchId?: string): Promise<BranchWasteAnalysis[]> {\n    if (branchId) {\n      return db.select().from(schema.branchWasteAnalysis)\n        .where(sql`${schema.branchWasteAnalysis.store} LIKE ${branchId + ':%'}`);\n    }\n    return db.query.branchWasteAnalysis.findMany();\n  }\n\n  async getIngredientDemandForecasts(): Promise<IngredientDemandForecast[]> {\n    return db.query.ingredientDemandForecasts.findMany();\n  }\n}\n\nexport const storage = process.env.DATABASE_URL ? new DbStorage() : new MemStorage();\n","size_bytes":25499},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, date, timestamp, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const branches = pgTable(\"branches\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  location: text(\"location\"),\n});\n\nexport const ingredients = pgTable(\"ingredients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  unit: text(\"unit\").notNull(),\n  imageUrl: text(\"image_url\"),\n});\n\nexport const ingredientStock = pgTable(\"ingredient_stock\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ingredientId: varchar(\"ingredient_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  expiryDate: date(\"expiry_date\").notNull(),\n  batchNumber: text(\"batch_number\"),\n  receivedDate: date(\"received_date\").notNull(),\n  isFromYesterday: boolean(\"is_from_yesterday\").notNull().default(false),\n});\n\nexport const bakeryProducts = pgTable(\"bakery_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  imageUrl: text(\"image_url\"),\n  shelfLifeHours: integer(\"shelf_life_hours\").notNull(),\n});\n\nexport const productStock = pgTable(\"product_stock\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  productionTime: timestamp(\"production_time\").notNull(),\n});\n\nexport const hourlyChecks = pgTable(\"hourly_checks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branchId: varchar(\"branch_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  checkTime: text(\"check_time\").notNull(),\n  countedQuantity: integer(\"counted_quantity\").notNull(),\n  systemQuantity: integer(\"system_quantity\").notNull(),\n  variance: integer(\"variance\").notNull(),\n});\n\nexport const demandForecasts = pgTable(\"demand_forecasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branchId: varchar(\"branch_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  forecastDate: date(\"forecast_date\").notNull(),\n  hour: integer(\"hour\").notNull(),\n  predictedDemand: integer(\"predicted_demand\").notNull(),\n});\n\nexport const branchForecasts = pgTable(\"branch_forecasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branchId: varchar(\"branch_id\").notNull(),\n  branchName: text(\"branch_name\").notNull(),\n  forecastDate: date(\"forecast_date\").notNull(),\n  totalForecast: integer(\"total_forecast\").notNull(),\n  accuracy: decimal(\"accuracy\", { precision: 5, scale: 2 }),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const productForecasts = pgTable(\"product_forecasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branchForecastId: varchar(\"branch_forecast_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  productCode: text(\"product_code\"),\n  productName: text(\"product_name\").notNull(),\n  forecastQuantity: integer(\"forecast_quantity\").notNull(),\n  minQuantity: integer(\"min_quantity\"),\n  maxQuantity: integer(\"max_quantity\"),\n  accuracy: decimal(\"accuracy\", { precision: 5, scale: 2 }),\n  modelType: text(\"model_type\"),\n});\n\nexport const productRecipes = pgTable(\"product_recipes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: text(\"sku\").notNull(),\n  shelfLifeDays: integer(\"shelf_life_days\").notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  ingredientCode: text(\"ingredient_code\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).notNull(),\n  hasSubstitute: boolean(\"has_substitute\").notNull(),\n});\n\nexport const productionPlans = pgTable(\"production_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  productCode: text(\"product_code\").notNull(),\n  product: text(\"product\").notNull(),\n  forecast: integer(\"forecast\").notNull(),\n  optimalProduction: integer(\"optimal_production\").notNull(),\n  adjustment: text(\"adjustment\").notNull(),\n  reasoning: text(\"reasoning\").notNull(),\n  shelfLifeDays: integer(\"shelf_life_days\").notNull(),\n  wasteRate: decimal(\"waste_rate\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const promotionRecommendations = pgTable(\"promotion_recommendations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  store: text(\"store\").notNull(),\n  productCode: text(\"product_code\").notNull(),\n  qtySold: integer(\"qty_sold\").notNull(),\n  wasteQty: integer(\"waste_qty\").notNull(),\n  wasteRate: decimal(\"waste_rate\", { precision: 10, scale: 2 }).notNull(),\n  wasteCost: decimal(\"waste_cost\", { precision: 10, scale: 2 }).notNull(),\n  totalVolume: integer(\"total_volume\").notNull(),\n});\n\nexport const dynamicPricingSchedules = pgTable(\"dynamic_pricing_schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  productCode: text(\"product_code\").notNull(),\n  product: text(\"product\").notNull(),\n  forecastQty: integer(\"forecast_qty\").notNull(),\n  time: text(\"time\").notNull(),\n  discountPercent: integer(\"discount_percent\").notNull(),\n  action: text(\"action\").notNull(),\n  reason: text(\"reason\").notNull(),\n  priority: integer(\"priority\").notNull(),\n  wasteRate: decimal(\"waste_rate\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const shelfLifeAlerts = pgTable(\"shelf_life_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  product: text(\"product\").notNull(),\n  productCode: text(\"product_code\").notNull(),\n  shelfLife: integer(\"shelf_life\").notNull(),\n  time: text(\"time\").notNull(),\n  alertType: text(\"alert_type\").notNull(),\n  message: text(\"message\").notNull(),\n  action: text(\"action\").notNull(),\n  urgency: text(\"urgency\").notNull(),\n});\n\nexport const dailyActionPlans = pgTable(\"daily_action_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branch: text(\"branch\").notNull(),\n  product: text(\"product\").notNull(),\n  morningAction: text(\"morning_action\").notNull(),\n  afternoonAction: text(\"afternoon_action\").notNull(),\n  eveningAction: text(\"evening_action\").notNull(),\n  shelfLife: integer(\"shelf_life\").notNull(),\n});\n\nexport const branchWasteAnalysis = pgTable(\"branch_waste_analysis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  store: text(\"store\").notNull(),\n  qtySold: integer(\"qty_sold\").notNull(),\n  wasteQty: integer(\"waste_qty\").notNull(),\n  wasteCost: decimal(\"waste_cost\", { precision: 10, scale: 2 }).notNull(),\n  wasteRate: decimal(\"waste_rate\", { precision: 10, scale: 2 }).notNull(),\n  totalVolume: integer(\"total_volume\").notNull(),\n});\n\nexport const ingredientDemandForecasts = pgTable(\"ingredient_demand_forecasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ingredientCode: text(\"ingredient_code\").notNull(),\n  totalDemand: decimal(\"total_demand\", { precision: 10, scale: 2 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  numSkus: integer(\"num_skus\").notNull(),\n  numBranches: integer(\"num_branches\").notNull(),\n  hasSubstitute: boolean(\"has_substitute\").notNull(),\n  numSubstitutes: integer(\"num_substitutes\").notNull(),\n});\n\nexport const ingredientStockRelations = relations(ingredientStock, ({ one }) => ({\n  ingredient: one(ingredients, {\n    fields: [ingredientStock.ingredientId],\n    references: [ingredients.id],\n  }),\n}));\n\nexport const productStockRelations = relations(productStock, ({ one }) => ({\n  product: one(bakeryProducts, {\n    fields: [productStock.productId],\n    references: [bakeryProducts.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertBranchSchema = createInsertSchema(branches);\nexport const insertIngredientSchema = createInsertSchema(ingredients).omit({ id: true });\nexport const insertIngredientStockSchema = createInsertSchema(ingredientStock).omit({ id: true });\nexport const insertBakeryProductSchema = createInsertSchema(bakeryProducts).omit({ id: true });\nexport const insertProductStockSchema = createInsertSchema(productStock).omit({ id: true });\nexport const insertHourlyCheckSchema = createInsertSchema(hourlyChecks).omit({ id: true });\nexport const insertDemandForecastSchema = createInsertSchema(demandForecasts).omit({ id: true });\nexport const insertBranchForecastSchema = createInsertSchema(branchForecasts).omit({ id: true, createdAt: true });\nexport const insertProductForecastSchema = createInsertSchema(productForecasts).omit({ id: true });\nexport const insertProductRecipeSchema = createInsertSchema(productRecipes).omit({ id: true });\nexport const insertProductionPlanSchema = createInsertSchema(productionPlans).omit({ id: true });\nexport const insertPromotionRecommendationSchema = createInsertSchema(promotionRecommendations).omit({ id: true });\nexport const insertDynamicPricingScheduleSchema = createInsertSchema(dynamicPricingSchedules).omit({ id: true });\nexport const insertShelfLifeAlertSchema = createInsertSchema(shelfLifeAlerts).omit({ id: true });\nexport const insertDailyActionPlanSchema = createInsertSchema(dailyActionPlans).omit({ id: true });\nexport const insertBranchWasteAnalysisSchema = createInsertSchema(branchWasteAnalysis).omit({ id: true });\nexport const insertIngredientDemandForecastSchema = createInsertSchema(ingredientDemandForecasts).omit({ id: true });\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Branch = typeof branches.$inferSelect;\nexport type Ingredient = typeof ingredients.$inferSelect;\nexport type IngredientStock = typeof ingredientStock.$inferSelect;\nexport type BakeryProduct = typeof bakeryProducts.$inferSelect;\nexport type ProductStock = typeof productStock.$inferSelect;\nexport type HourlyCheck = typeof hourlyChecks.$inferSelect;\nexport type DemandForecast = typeof demandForecasts.$inferSelect;\nexport type BranchForecast = typeof branchForecasts.$inferSelect;\nexport type ProductForecast = typeof productForecasts.$inferSelect;\nexport type ProductRecipe = typeof productRecipes.$inferSelect;\nexport type ProductionPlan = typeof productionPlans.$inferSelect;\nexport type PromotionRecommendation = typeof promotionRecommendations.$inferSelect;\nexport type DynamicPricingSchedule = typeof dynamicPricingSchedules.$inferSelect;\nexport type ShelfLifeAlert = typeof shelfLifeAlerts.$inferSelect;\nexport type DailyActionPlan = typeof dailyActionPlans.$inferSelect;\nexport type BranchWasteAnalysis = typeof branchWasteAnalysis.$inferSelect;\nexport type IngredientDemandForecast = typeof ingredientDemandForecasts.$inferSelect;\n","size_bytes":11319},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { BranchSelector } from \"@/components/BranchSelector\";\nimport { Bell, LayoutDashboard, Package, Clock, AlertTriangle, TrendingUp, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useRealtimeUpdates, requestNotificationPermission } from \"@/hooks/useRealtimeUpdates\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Branch } from \"@shared/schema\";\n\nimport Dashboard from \"@/pages/Dashboard\";\nimport IngredientManagement from \"@/pages/IngredientManagement\";\nimport HourlyCheck from \"@/pages/HourlyCheck\";\nimport Alerts from \"@/pages/Alerts\";\nimport ForecastImport from \"@/pages/ForecastImport\";\nimport TodayForecast from \"@/pages/TodayForecast\";\nimport Optimization from \"@/pages/Optimization\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router({ selectedBranchId }: { selectedBranchId: string }) {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <Dashboard selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/today-forecast\">\n        <TodayForecast selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/optimization\">\n        <Optimization selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/ingredients\">\n        <IngredientManagement selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/hourly-check\">\n        <HourlyCheck selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/alerts\">\n        <Alerts selectedBranchId={selectedBranchId} />\n      </Route>\n      <Route path=\"/forecast-import\">\n        <ForecastImport />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction BottomNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: LayoutDashboard },\n    { path: \"/today-forecast\", label: \"พยากรณ์\", icon: TrendingUp },\n    { path: \"/optimization\", label: \"เพิ่มประสิทธิภาพ\", icon: Zap },\n    { path: \"/ingredients\", label: \"วัตถุดิบ\", icon: Package },\n    { path: \"/hourly-check\", label: \"ตรวจนับ\", icon: Clock },\n  ];\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-card border-t z-50\">\n      <div className=\"grid grid-cols-5 gap-1 p-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          return (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant={isActive ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                className=\"w-full flex-col h-auto py-2 gap-1\"\n                data-testid={`nav-${item.path}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs\">{item.label}</span>\n              </Button>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction DesktopNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: LayoutDashboard },\n    { path: \"/today-forecast\", label: \"พยากรณ์วันนี้\", icon: TrendingUp },\n    { path: \"/optimization\", label: \"เพิ่มประสิทธิภาพ\", icon: Zap },\n    { path: \"/ingredients\", label: \"จัดการวัตถุดิบ\", icon: Package },\n    { path: \"/hourly-check\", label: \"ตรวจนับรายชั่วโมง\", icon: Clock },\n    { path: \"/alerts\", label: \"การแจ้งเตือน\", icon: AlertTriangle },\n  ];\n\n  return (\n    <nav className=\"hidden md:flex items-center gap-2\">\n      {navItems.map((item) => {\n        const Icon = item.icon;\n        const isActive = location === item.path;\n        return (\n          <Link key={item.path} href={item.path}>\n            <Button\n              variant={isActive ? \"default\" : \"ghost\"}\n              className=\"gap-2\"\n              data-testid={`nav-${item.path}`}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {item.label}\n            </Button>\n          </Link>\n        );\n      })}\n    </nav>\n  );\n}\n\nfunction AppContent({ selectedBranch, setSelectedBranch, alertCount, mockBranches }: any) {\n  useRealtimeUpdates(selectedBranch);\n\n  useEffect(() => {\n    requestNotificationPermission();\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n            <header className=\"sticky top-0 z-40 bg-card border-b\">\n              <div className=\"container mx-auto px-4 h-16 flex items-center justify-between gap-4\">\n                <div className=\"flex items-center gap-4\">\n                  <h1 className=\"text-xl font-bold hidden sm:block\">ระบบจัดการเบเกอรี่</h1>\n                  <h1 className=\"text-xl font-bold sm:hidden\">เบเกอรี่</h1>\n                  <BranchSelector\n                    branches={mockBranches}\n                    selectedBranchId={selectedBranch}\n                    onSelect={setSelectedBranch}\n                  />\n                </div>\n                <DesktopNav />\n                <div className=\"flex items-center gap-2\">\n                  <Link href=\"/alerts\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-alerts\">\n                      <Bell className=\"h-5 w-5\" />\n                      {alertCount > 0 && (\n                        <Badge\n                          variant=\"destructive\"\n                          className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                        >\n                          {alertCount}\n                        </Badge>\n                      )}\n                    </Button>\n                  </Link>\n                  <ThemeToggle />\n                </div>\n              </div>\n            </header>\n            <main className=\"container mx-auto px-4 py-6 pb-20 md:pb-6\">\n              <Router selectedBranchId={selectedBranch} />\n            </main>\n      <BottomNav />\n    </div>\n  );\n}\n\nfunction AppWithData() {\n  const [selectedBranch, setSelectedBranch] = useState(\"\");\n  const [alertCount] = useState(3);\n\n  const { data: branches = [], isLoading } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  useEffect(() => {\n    if (branches.length > 0 && !selectedBranch) {\n      setSelectedBranch(branches[0].id);\n    }\n  }, [branches, selectedBranch]);\n\n  if (isLoading || !selectedBranch) {\n    return null;\n  }\n\n  return (\n    <AppContent\n      selectedBranch={selectedBranch}\n      setSelectedBranch={setSelectedBranch}\n      alertCount={alertCount}\n      mockBranches={branches}\n    />\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AppWithData />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7490},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 9% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 220 9% 91%;\n\n  --sidebar: 220 5% 94%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 220 9% 89%;\n\n  --sidebar-primary: 211 100% 43%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 8% 88%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 211 100% 43%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 220 9% 86%;\n\n  --primary: 211 100% 43%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 6% 86%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 220 8% 90%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 10% 88%;\n\n  --accent-foreground: 220 13% 20%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 211 100% 43%;\n  --chart-1: 211 100% 43%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 280 65% 50%;\n\n  --success: 142 71% 45%;\n  --success-foreground: 0 0% 98%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 0 0% 18%;\n  --critical: 0 84% 60%;\n  --critical-foreground: 0 0% 98%;\n\n  --font-sans: 'Noto Sans Thai', 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.06);\n  --shadow: 0px 4px 6px 0px hsl(220 13% 18% / 0.05), 0px 1px 2px -1px hsl(220 13% 18% / 0.05);\n  --shadow-md: 0px 6px 12px 0px hsl(220 13% 18% / 0.08), 0px 2px 4px -1px hsl(220 13% 18% / 0.08);\n  --shadow-lg: 0px 10px 20px 0px hsl(220 13% 18% / 0.10), 0px 4px 6px -1px hsl(220 13% 18% / 0.10);\n  --shadow-xl: 0px 15px 30px 0px hsl(220 13% 18% / 0.12), 0px 8px 10px -1px hsl(220 13% 18% / 0.12);\n  --shadow-2xl: 0px 25px 50px 0px hsl(220 13% 18% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 13% 22%;\n\n  --card: 220 13% 14%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 13% 20%;\n\n  --sidebar: 220 13% 16%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 13% 23%;\n\n  --sidebar-primary: 211 100% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 10% 22%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 211 100% 60%;\n\n  --popover: 220 13% 18%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 13% 25%;\n\n  --primary: 211 100% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 10% 24%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 10% 20%;\n\n  --muted-foreground: 220 9% 70%;\n\n  --accent: 220 12% 22%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 84% 70%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 35%;\n  --ring: 211 100% 60%;\n  --chart-1: 211 100% 65%;\n  --chart-2: 142 71% 55%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 280 65% 65%;\n\n  --success: 142 71% 55%;\n  --success-foreground: 0 0% 98%;\n  --warning: 38 92% 60%;\n  --warning-foreground: 0 0% 10%;\n  --critical: 0 84% 70%;\n  --critical-foreground: 0 0% 98%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.22);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.28), 0px 2px 4px -1px hsl(0 0% 0% / 0.28);\n  --shadow-lg: 0px 10px 20px 0px hsl(0 0% 0% / 0.32), 0px 4px 6px -1px hsl(0 0% 0% / 0.32);\n  --shadow-xl: 0px 15px 30px 0px hsl(0 0% 0% / 0.36), 0px 8px 10px -1px hsl(0 0% 0% / 0.36);\n  --shadow-2xl: 0px 25px 50px 0px hsl(0 0% 0% / 0.40);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11381},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AlertList.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, AlertCircle, Info, X } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Alert {\n  id: string;\n  type: \"critical\" | \"warning\" | \"info\";\n  message: string;\n  timestamp: string;\n  actionLabel?: string;\n}\n\ninterface AlertListProps {\n  alerts: Alert[];\n  onDismiss?: (id: string) => void;\n  onAction?: (id: string) => void;\n}\n\nexport function AlertList({ alerts, onDismiss, onAction }: AlertListProps) {\n  const getAlertIcon = (type: Alert[\"type\"]) => {\n    switch (type) {\n      case \"critical\":\n        return <AlertCircle className=\"h-5 w-5 text-critical\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-warning\" />;\n      case \"info\":\n        return <Info className=\"h-5 w-5 text-primary\" />;\n    }\n  };\n\n  const getBadgeVariant = (type: Alert[\"type\"]) => {\n    switch (type) {\n      case \"critical\":\n        return \"destructive\";\n      case \"warning\":\n        return \"default\";\n      case \"info\":\n        return \"secondary\";\n    }\n  };\n\n  const groupedAlerts = {\n    critical: alerts.filter((a) => a.type === \"critical\"),\n    warning: alerts.filter((a) => a.type === \"warning\"),\n    info: alerts.filter((a) => a.type === \"info\"),\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">การแจ้งเตือน</h3>\n        <Badge variant=\"secondary\" data-testid=\"badge-alert-count\">\n          {alerts.length}\n        </Badge>\n      </div>\n      <ScrollArea className=\"h-[400px]\">\n        <div className=\"space-y-3\">\n          {Object.entries(groupedAlerts).map(([type, typeAlerts]) =>\n            typeAlerts.map((alert) => (\n              <div\n                key={alert.id}\n                className={cn(\n                  \"flex items-start gap-3 p-3 rounded-md border-l-4 bg-card\",\n                  alert.type === \"critical\" && \"border-l-critical\",\n                  alert.type === \"warning\" && \"border-l-warning\",\n                  alert.type === \"info\" && \"border-l-primary\"\n                )}\n                data-testid={`alert-${alert.id}`}\n              >\n                <div className=\"mt-0.5\">{getAlertIcon(alert.type)}</div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium\">{alert.message}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{alert.timestamp}</p>\n                  {alert.actionLabel && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"mt-2\"\n                      onClick={() => onAction?.(alert.id)}\n                      data-testid={`button-action-${alert.id}`}\n                    >\n                      {alert.actionLabel}\n                    </Button>\n                  )}\n                </div>\n                {onDismiss && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-6 w-6\"\n                    onClick={() => onDismiss(alert.id)}\n                    data-testid={`button-dismiss-${alert.id}`}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))\n          )}\n          {alerts.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Info className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n              <p>ไม่มีการแจ้งเตือน</p>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </Card>\n  );\n}\n","size_bytes":3854},"client/src/components/BranchSelector.tsx":{"content":"import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { MapPin } from \"lucide-react\";\n\ninterface Branch {\n  id: string;\n  name: string;\n  location?: string;\n}\n\ninterface BranchSelectorProps {\n  branches: Branch[];\n  selectedBranchId: string;\n  onSelect: (branchId: string) => void;\n}\n\nexport function BranchSelector({ branches, selectedBranchId, onSelect }: BranchSelectorProps) {\n  const selectedBranch = branches.find((b) => b.id === selectedBranchId);\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n      <Select value={selectedBranchId} onValueChange={onSelect}>\n        <SelectTrigger className=\"w-[200px]\" data-testid=\"select-branch\">\n          <SelectValue placeholder=\"เลือกสาขา\">\n            {selectedBranch?.name || \"เลือกสาขา\"}\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {branches.map((branch) => (\n            <SelectItem key={branch.id} value={branch.id}>\n              <div>\n                <div className=\"font-medium\">{branch.name}</div>\n                {branch.location && (\n                  <div className=\"text-xs text-muted-foreground\">{branch.location}</div>\n                )}\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n","size_bytes":1435},"client/src/components/DateTimePicker.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Clock, Check, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface DateTimePickerProps {\n  currentDate: string;\n  currentTime: string;\n  onConfirm: (date: string, time: string) => void;\n  onCancel: () => void;\n}\n\nexport function DateTimePicker({ currentDate, currentTime, onConfirm, onCancel }: DateTimePickerProps) {\n  const [date, setDate] = useState(currentDate);\n  const [time, setTime] = useState(currentTime);\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center gap-2 mb-4\">\n        <Clock className=\"h-5 w-5 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">ตรวจสอบและปรับวันเวลา</h3>\n      </div>\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label>วันที่ปัจจุบัน</Label>\n            <div className=\"text-sm text-muted-foreground mb-2\">\n              {new Date(currentDate).toLocaleDateString(\"th-TH\", {\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\",\n              })}\n            </div>\n            <Input\n              type=\"date\"\n              value={date}\n              onChange={(e) => setDate(e.target.value)}\n              data-testid=\"input-date\"\n            />\n          </div>\n          <div>\n            <Label>เวลาปัจจุบัน</Label>\n            <div className=\"text-sm text-muted-foreground mb-2\">{currentTime}</div>\n            <Input\n              type=\"time\"\n              value={time}\n              onChange={(e) => setTime(e.target.value)}\n              data-testid=\"input-time\"\n            />\n          </div>\n        </div>\n        <div className=\"flex gap-3 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"flex-1\"\n            data-testid=\"button-cancel-datetime\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            ยกเลิก\n          </Button>\n          <Button\n            onClick={() => onConfirm(date, time)}\n            className=\"flex-1\"\n            data-testid=\"button-confirm-datetime\"\n          >\n            <Check className=\"h-4 w-4 mr-2\" />\n            ยืนยัน\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2540},"client/src/components/ForecastChart.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\ninterface ForecastData {\n  hour: string;\n  predicted: number;\n  actual?: number;\n}\n\ninterface ForecastChartProps {\n  data: ForecastData[];\n  currentHour?: string;\n}\n\nexport function ForecastChart({ data, currentHour }: ForecastChartProps) {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">พยากรณ์ความต้องการ (วันนี้)</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-border\" />\n          <XAxis\n            dataKey=\"hour\"\n            className=\"text-xs\"\n            tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n          />\n          <YAxis\n            className=\"text-xs\"\n            tick={{ fill: \"hsl(var(--muted-foreground))\" }}\n          />\n          <Tooltip\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"6px\",\n            }}\n          />\n          <Legend />\n          <Bar\n            dataKey=\"predicted\"\n            fill=\"hsl(var(--chart-1))\"\n            name=\"คาดการณ์\"\n            radius={[4, 4, 0, 0]}\n          />\n          {data.some((d) => d.actual !== undefined) && (\n            <Bar\n              dataKey=\"actual\"\n              fill=\"hsl(var(--chart-2))\"\n              name=\"จริง\"\n              radius={[4, 4, 0, 0]}\n            />\n          )}\n        </BarChart>\n      </ResponsiveContainer>\n    </Card>\n  );\n}\n","size_bytes":1721},"client/src/components/ForecastPanel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from \"recharts\";\nimport { TrendingUp, TrendingDown, Target, Sparkles, Calendar, BarChart3 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { th } from \"date-fns/locale\";\nimport type { BranchForecast, ProductForecast } from \"@shared/schema\";\n\ninterface ForecastPanelProps {\n  selectedBranch: string;\n  selectedDate: string;\n}\n\nexport function ForecastPanel({ selectedBranch, selectedDate }: ForecastPanelProps) {\n  const { data: allForecasts, isLoading: loadingAll } = useQuery<(BranchForecast & { products: ProductForecast[] })[]>({\n    queryKey: [\"/api/forecasts\", selectedDate],\n    enabled: !!selectedDate,\n  });\n\n  const { data: branchForecast, isLoading: loadingBranch } = useQuery<BranchForecast & { products: ProductForecast[] }>({\n    queryKey: [\"/api/forecasts\", selectedBranch, selectedDate],\n    enabled: !!selectedBranch && !!selectedDate,\n  });\n\n  if (loadingAll && loadingBranch) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5\" />\n            กำลังโหลดข้อมูลการพยากรณ์...\n          </CardTitle>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  const overallAccuracy = allForecasts && allForecasts.length > 0\n    ? allForecasts.reduce((sum, f) => sum + parseFloat(f.accuracy || \"0\"), 0) / allForecasts.length\n    : 0;\n\n  const branchAccuracy = branchForecast?.accuracy ? parseFloat(branchForecast.accuracy) : null;\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-primary\" />\n            ข้อมูลการพยากรณ์จาก Hybrid Bakery Forecast System\n          </CardTitle>\n          <CardDescription className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4\" />\n            วันที่: {selectedDate ? format(new Date(selectedDate), \"d MMMM yyyy\", { locale: th }) : \"-\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 border rounded-lg bg-card\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">สาขาทั้งหมด</span>\n                <Target className=\"w-4 h-4 text-muted-foreground\" />\n              </div>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-branches\">\n                {allForecasts?.length || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">สาขาที่มีการพยากรณ์</p>\n            </div>\n\n            <div className=\"p-4 border rounded-lg bg-card\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">ความแม่นยำเฉลี่ย</span>\n                <BarChart3 className=\"w-4 h-4 text-muted-foreground\" />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-2xl font-bold\" data-testid=\"text-overall-accuracy\">\n                  {overallAccuracy.toFixed(2)}%\n                </div>\n                {overallAccuracy >= 60 ? (\n                  <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                ) : (\n                  <TrendingDown className=\"w-5 h-5 text-orange-500\" />\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">จากทุกสาขา</p>\n            </div>\n\n            <div className=\"p-4 border rounded-lg bg-card\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">ความแม่นยำสาขานี้</span>\n                <Target className=\"w-4 h-4 text-muted-foreground\" />\n              </div>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-branch-accuracy\">\n                {branchAccuracy !== null ? `${branchAccuracy.toFixed(2)}%` : \"-\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {branchForecast?.branchName || \"กรุณาเลือกสาขา\"}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {branchForecast && (\n        <Tabs defaultValue=\"products\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">\n              รายการสินค้า\n            </TabsTrigger>\n            <TabsTrigger value=\"chart\" data-testid=\"tab-chart\">\n              กราฟเปรียบเทียบ\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"space-y-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>การพยากรณ์ตามผลิตภัณฑ์</CardTitle>\n                <CardDescription>\n                  พยากรณ์ความต้องการสินค้าแต่ละช้นสำหรับ {branchForecast.branchName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {branchForecast.products.map((product) => {\n                    const productAccuracy = parseFloat(product.accuracy || \"0\");\n                    return (\n                      <div\n                        key={product.id}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover-elevate\"\n                        data-testid={`product-forecast-${product.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium\">{product.productName}</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {product.productCode}\n                            </Badge>\n                            <Badge\n                              variant={productAccuracy >= 60 ? \"default\" : \"secondary\"}\n                              className=\"text-xs\"\n                            >\n                              {productAccuracy.toFixed(1)}%\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span>พยากรณ์: {product.forecastQuantity} ชิ้น</span>\n                            <span>ต่ำสุด: {product.minQuantity}</span>\n                            <span>สูงสุด: {product.maxQuantity}</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {product.modelType}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"chart\">\n            <Card>\n              <CardHeader>\n                <CardTitle>กราฟเปรียบเทียบการพยากรณ์</CardTitle>\n                <CardDescription>\n                  ความแม่นยำและปริมาณพยากรณ์แต่ละผลิตภัณฑ์\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={branchForecast.products}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                      dataKey=\"productCode\"\n                      tick={{ fontSize: 12 }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"hsl(var(--primary))\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"hsl(var(--chart-2))\" />\n                    <Tooltip\n                      content={({ active, payload }) => {\n                        if (!active || !payload || !payload.length) return null;\n                        const data = payload[0].payload;\n                        return (\n                          <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                            <p className=\"font-medium mb-2\">{data.productName}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              พยากรณ์: {data.forecastQuantity} ชิ้น\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              ความแม่นยำ: {parseFloat(data.accuracy || \"0\").toFixed(2)}%\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              ช่วง: {data.minQuantity} - {data.maxQuantity}\n                            </p>\n                          </div>\n                        );\n                      }}\n                    />\n                    <Legend />\n                    <Bar\n                      yAxisId=\"left\"\n                      dataKey=\"forecastQuantity\"\n                      name=\"ปริมาณพยากรณ์\"\n                      fill=\"hsl(var(--primary))\"\n                    />\n                    <Bar\n                      yAxisId=\"right\"\n                      dataKey={(data: ProductForecast) => parseFloat(data.accuracy || \"0\")}\n                      name=\"ความแม่นยำ (%)\"\n                      fill=\"hsl(var(--chart-2))\"\n                    >\n                      {branchForecast.products.map((entry, index) => {\n                        const accuracy = parseFloat(entry.accuracy || \"0\");\n                        return (\n                          <Cell\n                            key={`cell-${index}`}\n                            fill={accuracy >= 60 ? \"hsl(var(--chart-2))\" : \"hsl(var(--chart-3))\"}\n                          />\n                        );\n                      })}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      )}\n\n      {allForecasts && allForecasts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>สรุปความแม่นยำทุกสาขา</CardTitle>\n            <CardDescription>เปรียบเทียบความแม่นยำการพยากรณ์ระหว่างสาขา</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart\n                data={allForecasts.map((f) => ({\n                  branchName: f.branchName,\n                  accuracy: parseFloat(f.accuracy || \"0\"),\n                  totalForecast: f.totalForecast,\n                }))}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"branchName\" tick={{ fontSize: 11 }} angle={-45} textAnchor=\"end\" height={100} />\n                <YAxis domain={[0, 100]} />\n                <Tooltip\n                  content={({ active, payload }) => {\n                    if (!active || !payload || !payload.length) return null;\n                    const data = payload[0].payload;\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium mb-1\">{data.branchName}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          ความแม่นยำ: {data.accuracy.toFixed(2)}%\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          ยอดรวม: {data.totalForecast} ชิ้น\n                        </p>\n                      </div>\n                    );\n                  }}\n                />\n                <Legend />\n                <Bar dataKey=\"accuracy\" name=\"ความแม่นยำ (%)\" fill=\"hsl(var(--primary))\">\n                  {allForecasts.map((entry, index) => {\n                    const accuracy = parseFloat(entry.accuracy || \"0\");\n                    return (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={\n                          accuracy >= 70\n                            ? \"hsl(var(--chart-1))\"\n                            : accuracy >= 50\n                            ? \"hsl(var(--chart-2))\"\n                            : \"hsl(var(--chart-3))\"\n                        }\n                      />\n                    );\n                  })}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":13980},"client/src/components/HourlyCheckModal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, TrendingDown, TrendingUp } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Product {\n  id: string;\n  name: string;\n  systemQuantity: number;\n  imageUrl?: string;\n}\n\ninterface HourlyCheckModalProps {\n  open: boolean;\n  onClose: () => void;\n  products: Product[];\n  onSubmit: (checks: { productId: string; counted: number; system: number }[]) => void;\n}\n\nexport function HourlyCheckModal({ open, onClose, products, onSubmit }: HourlyCheckModalProps) {\n  const [counts, setCounts] = useState<Record<string, number>>(\n    products.reduce((acc, p) => ({ ...acc, [p.id]: p.systemQuantity }), {})\n  );\n\n  const handleSubmit = () => {\n    const checks = products.map((p) => ({\n      productId: p.id,\n      counted: counts[p.id] || 0,\n      system: p.systemQuantity,\n    }));\n    onSubmit(checks);\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            ตรวจนับสต๊อกเบเกอรี่\n          </DialogTitle>\n          <DialogDescription>\n            กรอกจำนวนสินค้าที่นับได้จริง ระบบจะคำนวณความแตกต่างและแนะนำโปรโมชั่นโดยอัตโนมัติ\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 py-4\">\n          {products.map((product) => {\n            const counted = counts[product.id] || 0;\n            const variance = counted - product.systemQuantity;\n            return (\n              <div\n                key={product.id}\n                className=\"p-4 border rounded-md space-y-3\"\n                data-testid={`product-check-${product.id}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">{product.name}</h4>\n                  {variance !== 0 && (\n                    <Badge\n                      variant={variance < 0 ? \"destructive\" : \"secondary\"}\n                      className=\"gap-1\"\n                    >\n                      {variance > 0 ? (\n                        <TrendingUp className=\"h-3 w-3\" />\n                      ) : (\n                        <TrendingDown className=\"h-3 w-3\" />\n                      )}\n                      {variance > 0 ? \"+\" : \"\"}\n                      {variance}\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    ในระบบ: <span className=\"font-mono font-medium\">{product.systemQuantity}</span> ชิ้น\n                  </div>\n                  <div>\n                    <Label htmlFor={`count-${product.id}`}>นับได้จริง</Label>\n                    <Input\n                      id={`count-${product.id}`}\n                      type=\"number\"\n                      value={counted}\n                      onChange={(e) =>\n                        setCounts({ ...counts, [product.id]: parseInt(e.target.value) || 0 })\n                      }\n                      className=\"font-mono text-lg\"\n                      data-testid={`input-count-${product.id}`}\n                    />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"flex gap-3 justify-end\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n            ยกเลิก\n          </Button>\n          <Button onClick={handleSubmit} data-testid=\"button-submit-check\">\n            บันทึกการตรวจนับ\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4323},"client/src/components/IngredientEntryForm.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, Minus, Calendar } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Ingredient {\n  id: string;\n  name: string;\n  unit: string;\n}\n\ninterface IngredientEntry {\n  ingredientId: string;\n  quantity: number;\n  expiryDate?: string;\n  batchNumber?: string;\n}\n\ninterface IngredientEntryFormProps {\n  ingredients: Ingredient[];\n  onSubmit: (entries: IngredientEntry[], type: \"yesterday\" | \"today\") => void;\n}\n\nexport function IngredientEntryForm({ ingredients, onSubmit }: IngredientEntryFormProps) {\n  const [yesterdayEntries, setYesterdayEntries] = useState<IngredientEntry[]>([]);\n  const [todayEntries, setTodayEntries] = useState<IngredientEntry[]>([]);\n  const [selectedTab, setSelectedTab] = useState<\"yesterday\" | \"today\">(\"yesterday\");\n\n  const addEntry = (type: \"yesterday\" | \"today\") => {\n    const newEntry: IngredientEntry = {\n      ingredientId: \"\",\n      quantity: 0,\n      expiryDate: \"\",\n      batchNumber: \"\",\n    };\n    if (type === \"yesterday\") {\n      setYesterdayEntries([...yesterdayEntries, newEntry]);\n    } else {\n      setTodayEntries([...todayEntries, newEntry]);\n    }\n  };\n\n  const updateEntry = (\n    type: \"yesterday\" | \"today\",\n    index: number,\n    field: keyof IngredientEntry,\n    value: string | number\n  ) => {\n    const entries = type === \"yesterday\" ? yesterdayEntries : todayEntries;\n    const updated = [...entries];\n    updated[index] = { ...updated[index], [field]: value };\n    type === \"yesterday\" ? setYesterdayEntries(updated) : setTodayEntries(updated);\n  };\n\n  const removeEntry = (type: \"yesterday\" | \"today\", index: number) => {\n    const entries = type === \"yesterday\" ? yesterdayEntries : todayEntries;\n    const filtered = entries.filter((_, i) => i !== index);\n    type === \"yesterday\" ? setYesterdayEntries(filtered) : setTodayEntries(filtered);\n  };\n\n  const handleSubmit = () => {\n    const entries = selectedTab === \"yesterday\" ? yesterdayEntries : todayEntries;\n    onSubmit(entries, selectedTab);\n  };\n\n  const renderEntryFields = (type: \"yesterday\" | \"today\") => {\n    const entries = type === \"yesterday\" ? yesterdayEntries : todayEntries;\n\n    return (\n      <div className=\"space-y-4\">\n        {entries.map((entry, index) => {\n          const selectedIngredient = ingredients.find((i) => i.id === entry.ingredientId);\n          return (\n            <div key={index} className=\"p-4 border rounded-md space-y-3\" data-testid={`ingredient-entry-${index}`}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>วัตถุดิบ</Label>\n                  <Select\n                    value={entry.ingredientId}\n                    onValueChange={(value) => updateEntry(type, index, \"ingredientId\", value)}\n                  >\n                    <SelectTrigger data-testid={`select-ingredient-${index}`}>\n                      <SelectValue placeholder=\"เลือกวัตถุดิบ\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {ingredients.map((ing) => (\n                        <SelectItem key={ing.id} value={ing.id}>\n                          {ing.name} ({ing.unit})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>จำนวน {selectedIngredient && `(${selectedIngredient.unit})`}</Label>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => updateEntry(type, index, \"quantity\", Math.max(0, entry.quantity - 1))}\n                      data-testid={`button-decrease-${index}`}\n                    >\n                      <Minus className=\"h-4 w-4\" />\n                    </Button>\n                    <Input\n                      type=\"number\"\n                      value={entry.quantity}\n                      onChange={(e) => updateEntry(type, index, \"quantity\", parseFloat(e.target.value) || 0)}\n                      className=\"text-center font-mono\"\n                      data-testid={`input-quantity-${index}`}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => updateEntry(type, index, \"quantity\", entry.quantity + 1)}\n                      data-testid={`button-increase-${index}`}\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>วันหมดอายุ</Label>\n                  <Input\n                    type=\"date\"\n                    value={entry.expiryDate || \"\"}\n                    onChange={(e) => updateEntry(type, index, \"expiryDate\", e.target.value)}\n                    data-testid={`input-expiry-${index}`}\n                  />\n                </div>\n                <div>\n                  <Label>เลขแบตช์ (ถ้ามี)</Label>\n                  <Input\n                    value={entry.batchNumber}\n                    onChange={(e) => updateEntry(type, index, \"batchNumber\", e.target.value)}\n                    placeholder=\"เช่น BATCH-001\"\n                    data-testid={`input-batch-${index}`}\n                  />\n                </div>\n              </div>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeEntry(type, index)}\n                className=\"w-full\"\n                data-testid={`button-remove-${index}`}\n              >\n                ลบรายการ\n              </Button>\n            </div>\n          );\n        })}\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => addEntry(type)}\n          className=\"w-full\"\n          data-testid={`button-add-entry-${type}`}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          เพิ่มวัตถุดิบ\n        </Button>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">บันทึกวัตถุดิบ</h3>\n      <Tabs value={selectedTab} onValueChange={(v) => setSelectedTab(v as \"yesterday\" | \"today\")}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"yesterday\" data-testid=\"tab-yesterday\">\n            วัตถุดิบคงเหลือจากเมื่อวาน\n          </TabsTrigger>\n          <TabsTrigger value=\"today\" data-testid=\"tab-today\">\n            วัตถุดิบที่รับวันนี้\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"yesterday\" className=\"mt-4\">\n          {renderEntryFields(\"yesterday\")}\n        </TabsContent>\n        <TabsContent value=\"today\" className=\"mt-4\">\n          {renderEntryFields(\"today\")}\n        </TabsContent>\n      </Tabs>\n      <div className=\"mt-6 pt-6 border-t\">\n        <Button onClick={handleSubmit} className=\"w-full\" data-testid=\"button-submit-entry\">\n          บันทึกข้อมูล\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":7897},"client/src/components/ProductionRecommendation.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CheckCircle, XCircle, TrendingUp, Clock } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface ProductionItem {\n  id: string;\n  name: string;\n  currentStock: number;\n  forecastDemand: number;\n  suggestedProduction: number;\n  ingredientsAvailable: boolean;\n  shelfLifeHours: number;\n}\n\ninterface ProductionRecommendationProps {\n  items: ProductionItem[];\n  onStartProduction: (productionPlan: { productId: string; quantity: number }[]) => void;\n}\n\nexport function ProductionRecommendation({ items, onStartProduction }: ProductionRecommendationProps) {\n  const [quantities, setQuantities] = useState<Record<string, number>>(\n    items.reduce((acc, item) => ({ ...acc, [item.id]: item.suggestedProduction }), {})\n  );\n\n  const handleSubmit = () => {\n    const plan = items\n      .filter((item) => quantities[item.id] > 0)\n      .map((item) => ({\n        productId: item.id,\n        quantity: quantities[item.id],\n      }));\n    onStartProduction(plan);\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">แนะนำการผลิต</h3>\n        <Badge variant=\"outline\" className=\"gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          อัพเดทล่าสุด: {new Date().toLocaleTimeString(\"th-TH\", { hour: \"2-digit\", minute: \"2-digit\" })}\n        </Badge>\n      </div>\n      <div className=\"space-y-4\">\n        {items.map((item) => {\n          const shortage = item.forecastDemand - item.currentStock;\n          return (\n            <div\n              key={item.id}\n              className=\"p-4 border rounded-md space-y-3\"\n              data-testid={`production-item-${item.id}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium\">{item.name}</h4>\n                  <div className=\"flex gap-4 mt-2 text-sm text-muted-foreground\">\n                    <span>สต๊อกปัจจุบัน: <span className=\"font-mono font-medium\">{item.currentStock}</span></span>\n                    <span>คาดการณ์: <span className=\"font-mono font-medium\">{item.forecastDemand}</span></span>\n                    {shortage > 0 && (\n                      <Badge variant=\"outline\" className=\"gap-1\">\n                        <TrendingUp className=\"h-3 w-3\" />\n                        ขาด {shortage}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                {item.ingredientsAvailable ? (\n                  <CheckCircle className=\"h-5 w-5 text-success\" />\n                ) : (\n                  <XCircle className=\"h-5 w-5 text-critical\" />\n                )}\n              </div>\n              <div>\n                <Label htmlFor={`qty-${item.id}`}>\n                  จำนวนที่จะผลิต\n                  <span className=\"text-xs text-muted-foreground ml-2\">\n                    (แนะนำ: {item.suggestedProduction})\n                  </span>\n                </Label>\n                <Input\n                  id={`qty-${item.id}`}\n                  type=\"number\"\n                  value={quantities[item.id]}\n                  onChange={(e) =>\n                    setQuantities({ ...quantities, [item.id]: parseInt(e.target.value) || 0 })\n                  }\n                  className=\"font-mono text-lg\"\n                  disabled={!item.ingredientsAvailable}\n                  data-testid={`input-production-${item.id}`}\n                />\n              </div>\n              {!item.ingredientsAvailable && (\n                <div className=\"text-sm text-critical flex items-center gap-2\">\n                  <XCircle className=\"h-4 w-4\" />\n                  วัตถุดิบไม่เพียงพอ\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"mt-6 pt-6 border-t\">\n        <Button onClick={handleSubmit} className=\"w-full\" data-testid=\"button-start-production\">\n          เริ่มการผลิต\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4452},"client/src/components/StatCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: string;\n  status?: \"success\" | \"warning\" | \"critical\" | \"default\";\n}\n\nexport function StatCard({ title, value, icon: Icon, trend, status = \"default\" }: StatCardProps) {\n  const borderColors = {\n    success: \"border-l-success\",\n    warning: \"border-l-warning\",\n    critical: \"border-l-critical\",\n    default: \"border-l-primary\",\n  };\n\n  const iconColors = {\n    success: \"text-success\",\n    warning: \"text-warning\",\n    critical: \"text-critical\",\n    default: \"text-primary\",\n  };\n\n  return (\n    <Card className={cn(\"p-6 border-l-4\", borderColors[status])}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-muted-foreground\">{title}</p>\n          <p className=\"text-3xl font-mono font-medium mt-2\" data-testid={`stat-value-${title}`}>\n            {value}\n          </p>\n          {trend && (\n            <p className=\"text-xs text-muted-foreground mt-2\">{trend}</p>\n          )}\n        </div>\n        <Icon className={cn(\"h-8 w-8\", iconColors[status])} />\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1289},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"dark\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setThemeState((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1223},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"สลับธีม\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":547},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useRealtimeUpdates.ts":{"content":"import { useEffect } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { io, Socket } from \"socket.io-client\";\n\nlet socket: Socket | null = null;\n\nexport function useRealtimeUpdates(branchId: string) {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!socket) {\n      socket = io({ path: \"/socket.io\" });\n\n      socket.on(\"connect\", () => {\n        console.log(\"WebSocket connected\");\n      });\n\n      socket.on(\"disconnect\", () => {\n        console.log(\"WebSocket disconnected\");\n      });\n    }\n\n    if (socket && branchId) {\n      socket.emit(\"join-branch\", branchId);\n\n      const handleStockUpdate = (data: any) => {\n        console.log(\"Stock updated:\", data);\n        queryClient.invalidateQueries({ queryKey: [\"/api/ingredients/stock\", branchId] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/ingredients/expiring\", branchId] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stats\", branchId] });\n      };\n\n      const handleProductStockUpdate = (data: any) => {\n        console.log(\"Product stock updated:\", data);\n        queryClient.invalidateQueries({ queryKey: [\"/api/products/stock\", branchId] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stats\", branchId] });\n      };\n\n      const handleHourlyCheckReminder = (data: any) => {\n        console.log(\"Hourly check reminder:\", data);\n        if (\"Notification\" in window && Notification.permission === \"granted\") {\n          new Notification(\"เตือนตรวจนับรายชั่วโมง\", {\n            body: `ถึงเวลาตรวจนับสินค้า (${new Date().toLocaleTimeString(\"th-TH\")})`,\n            icon: \"/icon.png\",\n          });\n        }\n      };\n\n      socket.on(\"stock-updated\", handleStockUpdate);\n      socket.on(\"product-stock-updated\", handleProductStockUpdate);\n      socket.on(\"hourly-check-reminder\", handleHourlyCheckReminder);\n\n      return () => {\n        socket?.off(\"stock-updated\", handleStockUpdate);\n        socket?.off(\"product-stock-updated\", handleProductStockUpdate);\n        socket?.off(\"hourly-check-reminder\", handleHourlyCheckReminder);\n      };\n    }\n  }, [branchId, queryClient]);\n\n  return { socket };\n}\n\nexport function requestNotificationPermission() {\n  if (\"Notification\" in window && Notification.permission === \"default\") {\n    Notification.requestPermission().then((permission) => {\n      console.log(\"Notification permission:\", permission);\n    });\n  }\n}\n","size_bytes":2498},"client/src/lib/api.ts":{"content":"export async function apiFetch(url: string, options?: RequestInit) {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`API request failed: ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport const api = {\n  getBranches: () => apiFetch(\"/api/branches\"),\n  getIngredients: () => apiFetch(\"/api/ingredients\"),\n  getIngredientStock: (branchId: string) => apiFetch(`/api/ingredients/stock/${branchId}`),\n  getExpiringIngredients: (branchId: string, days: number) => \n    apiFetch(`/api/ingredients/expiring/${branchId}/${days}`),\n  addIngredientStock: (data: any) => \n    apiFetch(\"/api/ingredients/stock\", { method: \"POST\", body: JSON.stringify(data) }),\n  addIngredientStockBatch: (branchId: string, entries: any[], type: \"yesterday\" | \"today\") =>\n    apiFetch(\"/api/ingredients/stock/batch\", { \n      method: \"POST\", \n      body: JSON.stringify({ branchId, entries, type }) \n    }),\n  getProducts: () => apiFetch(\"/api/products\"),\n  getProductStock: (branchId: string) => apiFetch(`/api/products/stock/${branchId}`),\n  submitHourlyCheck: (branchId: string, checks: any[]) =>\n    apiFetch(\"/api/hourly-check\", { method: \"POST\", body: JSON.stringify({ branchId, checks }) }),\n  getForecast: (branchId: string) => apiFetch(`/api/forecast/${branchId}`),\n  getProductionPlan: (branchId: string) => apiFetch(`/api/production-plan/${branchId}`),\n  getStats: (branchId: string) => apiFetch(`/api/stats/${branchId}`),\n};\n","size_bytes":1570},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Alerts.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertTriangle, AlertCircle, Info, Calendar, Package } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExpirationAlert {\n  id: string;\n  ingredientName: string;\n  quantity: number;\n  unit: string;\n  expiryDate: string;\n  daysUntilExpiry: number;\n  suggestedAction: string;\n}\n\ninterface AlertsProps {\n  selectedBranchId: string;\n}\n\nexport default function Alerts({ selectedBranchId }: AlertsProps) {\n  const [dismissedAlerts, setDismissedAlerts] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const { data: alertsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/ingredients/expiring\", selectedBranchId, 7],\n    queryFn: () => api.getExpiringIngredients(selectedBranchId, 7),\n  });\n\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถโหลดข้อมูลการแจ้งเตือนได้\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  const alerts = (alertsData || []).filter(\n    (alert: ExpirationAlert) => !dismissedAlerts.includes(alert.id)\n  );\n\n  const todayAlerts = alerts.filter((a: ExpirationAlert) => a.daysUntilExpiry === 0);\n  const thisWeekAlerts = alerts.filter(\n    (a: ExpirationAlert) => a.daysUntilExpiry > 0 && a.daysUntilExpiry <= 3\n  );\n  const nextWeekAlerts = alerts.filter(\n    (a: ExpirationAlert) => a.daysUntilExpiry > 3 && a.daysUntilExpiry <= 7\n  );\n\n  const getAlertColor = (days: number) => {\n    if (days === 0) return \"border-l-critical bg-critical/5\";\n    if (days <= 3) return \"border-l-warning bg-warning/5\";\n    return \"border-l-primary bg-primary/5\";\n  };\n\n  const handleDismiss = (alertId: string) => {\n    setDismissedAlerts([...dismissedAlerts, alertId]);\n    toast({\n      title: \"ยกเลิกการแจ้งเตือน\",\n      description: \"ยกเลิกการแจ้งเตือนเรียบร้อยแล้ว\",\n    });\n  };\n\n  const renderAlertList = (alertList: ExpirationAlert[]) => {\n    if (isLoading) {\n      return (\n        <div className=\"space-y-3\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i} className=\"p-4\">\n              <Skeleton className=\"h-24 w-full\" />\n            </Card>\n          ))}\n        </div>\n      );\n    }\n\n    if (alertList.length === 0) {\n      return (\n        <div className=\"text-center py-12 text-muted-foreground\">\n          <Package className=\"h-16 w-16 mx-auto mb-4 opacity-30\" />\n          <p>ไม่มีการแจ้งเตือนในหมวดนี้</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-3\">\n        {alertList.map((alert) => (\n          <Card\n            key={alert.id}\n            className={`p-4 border-l-4 ${getAlertColor(alert.daysUntilExpiry)}`}\n            data-testid={`alert-${alert.id}`}\n          >\n            <div className=\"flex items-start justify-between gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  {alert.daysUntilExpiry === 0 ? (\n                    <AlertCircle className=\"h-5 w-5 text-critical\" />\n                  ) : alert.daysUntilExpiry <= 3 ? (\n                    <AlertTriangle className=\"h-5 w-5 text-warning\" />\n                  ) : (\n                    <Info className=\"h-5 w-5 text-primary\" />\n                  )}\n                  <h3 className=\"font-semibold\">{alert.ingredientName}</h3>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm text-muted-foreground mb-3\">\n                  <div>\n                    จำนวน:{\" \"}\n                    <span className=\"font-mono font-medium text-foreground\">\n                      {alert.quantity} {alert.unit}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    {new Date(alert.expiryDate).toLocaleDateString(\"th-TH\")}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Badge\n                    variant={\n                      alert.daysUntilExpiry === 0\n                        ? \"destructive\"\n                        : alert.daysUntilExpiry <= 3\n                          ? \"default\"\n                          : \"secondary\"\n                    }\n                  >\n                    {alert.daysUntilExpiry === 0\n                      ? \"หมดอายุวันนี้\"\n                      : `เหลือ ${alert.daysUntilExpiry} วัน`}\n                  </Badge>\n                </div>\n                <div className=\"text-sm bg-card rounded-md p-2 border\">\n                  <span className=\"font-medium\">คำแนะนำ:</span> {alert.suggestedAction}\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-2\">\n                <Button size=\"sm\" variant=\"outline\" data-testid={`button-use-${alert.id}`}>\n                  ใช้เลย\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => handleDismiss(alert.id)}\n                  data-testid={`button-dismiss-${alert.id}`}\n                >\n                  ยกเลิก\n                </Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">การแจ้งเตือน</h1>\n        <p className=\"text-sm text-muted-foreground\">\n          ติดตามวัตถุดิบที่ใกล้หมดอายุและรับคำแนะนำ\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-4 border-l-4 border-l-critical\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">หมดอายุวันนี้</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-mono font-bold\">{todayAlerts.length}</p>\n              )}\n            </div>\n            <AlertCircle className=\"h-8 w-8 text-critical\" />\n          </div>\n        </Card>\n        <Card className=\"p-4 border-l-4 border-l-warning\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">ภายใน 3 วัน</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-mono font-bold\">{thisWeekAlerts.length}</p>\n              )}\n            </div>\n            <AlertTriangle className=\"h-8 w-8 text-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-4 border-l-4 border-l-primary\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">สัปดาห์หน้า</p>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-12 mt-1\" />\n              ) : (\n                <p className=\"text-2xl font-mono font-bold\">{nextWeekAlerts.length}</p>\n              )}\n            </div>\n            <Info className=\"h-8 w-8 text-primary\" />\n          </div>\n        </Card>\n      </div>\n\n      <Card className=\"p-6\">\n        <Tabs defaultValue=\"today\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"today\" data-testid=\"tab-today\">\n              หมดอายุวันนี้ ({todayAlerts.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"thisweek\" data-testid=\"tab-thisweek\">\n              ภายใน 3 วัน ({thisWeekAlerts.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"nextweek\" data-testid=\"tab-nextweek\">\n              สัปดาห์หน้า ({nextWeekAlerts.length})\n            </TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"today\" className=\"mt-6\">\n            {renderAlertList(todayAlerts)}\n          </TabsContent>\n          <TabsContent value=\"thisweek\" className=\"mt-6\">\n            {renderAlertList(thisWeekAlerts)}\n          </TabsContent>\n          <TabsContent value=\"nextweek\" className=\"mt-6\">\n            {renderAlertList(nextWeekAlerts)}\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9161},"client/src/pages/Dashboard.tsx":{"content":"import { StatCard } from \"@/components/StatCard\";\nimport { AlertList } from \"@/components/AlertList\";\nimport { ForecastChart } from \"@/components/ForecastChart\";\nimport { ForecastPanel } from \"@/components/ForecastPanel\";\nimport { ProductionRecommendation } from \"@/components/ProductionRecommendation\";\nimport { IngredientEntryForm } from \"@/components/IngredientEntryForm\";\nimport { HourlyCheckModal } from \"@/components/HourlyCheckModal\";\nimport { DateTimePicker } from \"@/components/DateTimePicker\";\nimport { Package, AlertTriangle, TrendingUp, ShoppingBag, Calendar, ArrowRight } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ToastAction } from \"@/components/ui/toast\";\nimport { useLocation } from \"wouter\";\n\ninterface DashboardProps {\n  selectedBranchId: string;\n}\n\nexport default function Dashboard({ selectedBranchId }: DashboardProps) {\n  const [showHourlyCheck, setShowHourlyCheck] = useState(false);\n  const [showDateTimePicker, setShowDateTimePicker] = useState(false);\n  const [forecastDate, setForecastDate] = useState(new Date().toISOString().split(\"T\")[0]);\n  const [dateTimeConfirmed, setDateTimeConfirmed] = useState(false);\n  const [ingredientsEntered, setIngredientsEntered] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\", selectedBranchId],\n    queryFn: () => api.getStats(selectedBranchId),\n  });\n\n  const { data: expiringIngredients = [] } = useQuery({\n    queryKey: [\"/api/ingredients/expiring\", selectedBranchId],\n    queryFn: () => api.getExpiringIngredients(selectedBranchId, 7),\n  });\n\n  const { data: forecastData = [] } = useQuery({\n    queryKey: [\"/api/forecast\", selectedBranchId],\n    queryFn: () => api.getForecast(selectedBranchId),\n  });\n\n  const { data: ingredients = [] } = useQuery({\n    queryKey: [\"/api/ingredients\"],\n    queryFn: () => api.getIngredients(),\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => api.getProducts(),\n  });\n\n  const { data: productStock = [] } = useQuery({\n    queryKey: [\"/api/products/stock\", selectedBranchId],\n    queryFn: () => api.getProductStock(selectedBranchId),\n  });\n\n  const { data: productionPlan = [] } = useQuery({\n    queryKey: [\"/api/production-plan\", selectedBranchId],\n    queryFn: () => api.getProductionPlan(selectedBranchId),\n  });\n\n  const { data: ingredientStock = [] } = useQuery({\n    queryKey: [\"/api/ingredients/stock\", selectedBranchId],\n    queryFn: () => api.getIngredientStock(selectedBranchId),\n  });\n\n  const addIngredientBatchMutation = useMutation({\n    mutationFn: ({ entries, type }: { entries: any[]; type: \"yesterday\" | \"today\" }) =>\n      api.addIngredientStockBatch(selectedBranchId, entries, type),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ingredients/stock\", selectedBranchId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ingredients/expiring\", selectedBranchId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", selectedBranchId] });\n      toast({\n        title: \"สำเร็จ\",\n        description: \"บันทึกข้อมูลวัตถุดิบเรียบร้อยแล้ว\",\n        action: (\n          <ToastAction altText=\"ดูรายการ\" onClick={() => setLocation(\"/ingredients\")}>\n            ดูรายการ\n          </ToastAction>\n        ),\n      });\n      setLocation(\"/ingredients\");\n    },\n    onError: () => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถบันทึกข้อมูลได้\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const hourlyCheckMutation = useMutation({\n    mutationFn: (checks: any[]) => api.submitHourlyCheck(selectedBranchId, checks),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products/stock\", selectedBranchId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", selectedBranchId] });\n      toast({\n        title: \"สำเร็จ\",\n        description: \"บันทึกการตรวจนับเรียบร้อยแล้ว\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถบันทึกการตรวจนับได้\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const alerts = expiringIngredients.slice(0, 5).map((ing: any, index: number) => ({\n    id: ing.id || `alert-${index}`,\n    type: ing.daysUntilExpiry === 0 ? (\"critical\" as const) : ing.daysUntilExpiry <= 3 ? (\"warning\" as const) : (\"info\" as const),\n    message: `${ing.ingredientName} ${ing.daysUntilExpiry === 0 ? \"หมดอายุวันนี้\" : `จะหมดอายุใน ${ing.daysUntilExpiry} วัน`} (${ing.quantity} ${ing.unit})`,\n    timestamp: new Date().toLocaleString(\"th-TH\"),\n    actionLabel: \"ดูรายละเอียด\",\n  }));\n\n  const handleDateTimeConfirm = (date: string, time: string) => {\n    console.log(\"Confirmed date and time:\", { date, time });\n    setShowDateTimePicker(false);\n    setDateTimeConfirmed(true);\n    toast({\n      title: \"ยืนยันวันเวลาแล้ว\",\n      description: \"คุณสามารถดำเนินการขั้นตอนถัดไปได้\",\n    });\n  };\n\n  const handleIngredientSubmit = (entries: any[], type: \"yesterday\" | \"today\") => {\n    if (entries.length === 0) {\n      toast({\n        title: \"ไม่มีข้อมูล\",\n        description: \"กรุณาเพิ่มรายการวัตถุดิบ\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const validEntries = entries.filter(\n      (e) => e.ingredientId && e.quantity > 0 && e.expiryDate\n    );\n\n    if (validEntries.length === 0) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณากรอกข้อมูลให้ครบถ้วน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addIngredientBatchMutation.mutate({ entries: validEntries, type });\n    setIngredientsEntered(true);\n  };\n\n  const handleHourlyCheckSubmit = (checks: any[]) => {\n    hourlyCheckMutation.mutate(checks);\n    setShowHourlyCheck(false);\n  };\n\n  const handleProductionStart = (plan: any[]) => {\n    console.log(\"Starting production:\", plan);\n    toast({\n      title: \"เริ่มการผลิต\",\n      description: `กำลังผลิต ${plan.length} รายการ`,\n    });\n  };\n\n  const handleAlertDismiss = (id: string) => {\n    console.log(\"Dismiss alert:\", id);\n  };\n\n  const handleAlertAction = (id: string) => {\n    console.log(\"Alert action:\", id);\n  };\n\n  const productsForHourlyCheck = productStock.map((ps: any) => ({\n    id: ps.productId,\n    name: ps.product.name,\n    systemQuantity: ps.quantity,\n  }));\n\n  const getExpiryBadge = (days: number) => {\n    if (days <= 1) return { variant: \"destructive\" as const, text: \"หมดอายุวันนี้\" };\n    if (days <= 3) return { variant: \"destructive\" as const, text: `${days} วัน` };\n    if (days <= 7) return { variant: \"default\" as const, text: `${days} วัน` };\n    return { variant: \"secondary\" as const, text: `${days} วัน` };\n  };\n\n  const recentIngredients = ingredientStock\n    .sort((a: any, b: any) => new Date(b.receivedDate).getTime() - new Date(a.receivedDate).getTime())\n    .slice(0, 5);\n\n  const workflowSteps = [\n    {\n      id: 1,\n      title: \"เช็ควันเวลา\",\n      description: \"ตรวจสอบและปรับวันเวลาให้ตรงกับปัจจุบัน\",\n      completed: dateTimeConfirmed,\n      action: () => setShowDateTimePicker(true),\n      buttonText: dateTimeConfirmed ? \"เช็คอีกครั้ง\" : \"เริ่มเช็ค\",\n    },\n    {\n      id: 2,\n      title: \"กรอกวัตถุดิบ\",\n      description: \"บันทึกวัตถุดิบเหลือจากเมื่อวาน และรับเข้าวันนี้\",\n      completed: ingredientsEntered,\n      disabled: !dateTimeConfirmed,\n      info: \"กรอกข้อมูลด้านล่าง\",\n    },\n    {\n      id: 3,\n      title: \"ดู Forecast\",\n      description: \"พิจารณาการผลิตจากพยากรณ์ความต้องการ\",\n      completed: false,\n      disabled: !ingredientsEntered,\n      action: () => setLocation(\"/today-forecast\"),\n      buttonText: \"ดูพยากรณ์\",\n    },\n    {\n      id: 4,\n      title: \"ตรวจนับรายชั่วโมง\",\n      description: \"ตรวจนับสต๊อกเบเกอรี่ทุกชั่วโมง\",\n      completed: false,\n      action: () => setShowHourlyCheck(true),\n      buttonText: \"เริ่มตรวจนับ\",\n      recurring: true,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n        <p className=\"text-sm text-muted-foreground\">ทำงานตามขั้นตอนเพื่อเริ่มต้นวันใหม่</p>\n      </div>\n\n      <Card className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-4\">ขั้นตอนการทำงานประจำวัน</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {workflowSteps.map((step, index) => (\n            <div\n              key={step.id}\n              className={`relative p-4 rounded-lg border-2 transition-all ${\n                step.completed\n                  ? \"border-primary bg-primary/5\"\n                  : step.disabled\n                  ? \"border-muted bg-muted/30 opacity-60\"\n                  : \"border-border hover-elevate\"\n              }`}\n              data-testid={`workflow-step-${step.id}`}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className={`w-8 h-8 rounded-full flex items-center justify-center font-bold ${\n                      step.completed\n                        ? \"bg-primary text-primary-foreground\"\n                        : step.disabled\n                        ? \"bg-muted text-muted-foreground\"\n                        : \"bg-card border-2 border-primary text-primary\"\n                    }`}\n                  >\n                    {step.completed ? \"✓\" : step.id}\n                  </div>\n                  {step.recurring && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">ทุกชั่วโมง</Badge>\n                  )}\n                </div>\n              </div>\n              <h3 className=\"font-semibold mb-1\">{step.title}</h3>\n              <p className=\"text-sm text-muted-foreground mb-3\">{step.description}</p>\n              {step.action && (\n                <Button\n                  size=\"sm\"\n                  variant={step.completed ? \"outline\" : \"default\"}\n                  className=\"w-full\"\n                  onClick={step.action}\n                  disabled={step.disabled}\n                  data-testid={`button-workflow-${step.id}`}\n                >\n                  {step.buttonText}\n                </Button>\n              )}\n              {step.info && (\n                <p className=\"text-xs text-primary font-medium\">{step.info}</p>\n              )}\n              {index < workflowSteps.length - 1 && (\n                <div className=\"hidden lg:block absolute top-1/2 -right-2 transform -translate-y-1/2 translate-x-full\">\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {showDateTimePicker && (\n        <DateTimePicker\n          currentDate={new Date().toISOString().split(\"T\")[0]}\n          currentTime={new Date().toTimeString().slice(0, 5)}\n          onConfirm={handleDateTimeConfirm}\n          onCancel={() => setShowDateTimePicker(false)}\n        />\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"วัตถุดิบคงเหลือ\"\n          value={stats?.totalIngredients || 0}\n          icon={Package}\n          trend=\"+5 จากเมื่อวาน\"\n          status=\"success\"\n        />\n        <StatCard\n          title=\"ใกล้หมดอายุ\"\n          value={stats?.expiringCount || 0}\n          icon={AlertTriangle}\n          trend=\"ภายใน 3 วัน\"\n          status={stats?.expiringCount > 5 ? \"warning\" : \"success\"}\n        />\n        <StatCard\n          title=\"เบเกอรี่วันนี้\"\n          value={stats?.totalProducts || 0}\n          icon={ShoppingBag}\n          trend=\"85% ของเป้าหมาย\"\n          status=\"success\"\n        />\n        <StatCard\n          title=\"ยอดขาย\"\n          value={stats?.salesAmount?.toLocaleString() || \"0\"}\n          icon={TrendingUp}\n          trend={`+${stats?.salesTrend || 0}% จากเมื่อวาน`}\n          status=\"default\"\n        />\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">วัตถุดิบที่เพิ่มล่าสุด</h2>\n            <p className=\"text-sm text-muted-foreground\">รายการวัตถุดิบที่เพิ่มเข้ามาล่าสุด 5 รายการ</p>\n          </div>\n          <Button variant=\"ghost\" onClick={() => setLocation(\"/ingredients\")} data-testid=\"button-view-all-ingredients\">\n            ดูทั้งหมด\n            <ArrowRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n        <div className=\"space-y-3\">\n          {recentIngredients.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Package className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n              <p>ยังไม่มีรายการวัตถุดิบ</p>\n            </div>\n          ) : (\n            recentIngredients.map((item: any) => {\n              const expiryBadge = getExpiryBadge(item.daysUntilExpiry);\n              return (\n                <div\n                  key={item.id}\n                  className=\"flex items-center justify-between p-3 rounded-md border hover-elevate\"\n                  data-testid={`recent-ingredient-${item.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <p className=\"font-medium\">{item.ingredient?.name || item.name}</p>\n                      {item.isFromYesterday && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">จากเมื่อวาน</Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      จำนวน: {item.quantity} {item.ingredient?.unit || item.unit}\n                      {item.batchNumber && ` • แบตช์: ${item.batchNumber}`}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>{new Date(item.expiryDate).toLocaleDateString(\"th-TH\")}</span>\n                      </div>\n                      <Badge variant={expiryBadge.variant} className=\"mt-1\">\n                        {expiryBadge.text}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </Card>\n\n      <Card className=\"p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n            2\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold\">กรอกข้อมูลวัตถุดิบ</h2>\n            <p className=\"text-sm text-muted-foreground\">บันทึกวัตถุดิบเหลือจากเมื่อวาน และวัตถุดิบที่รับเข้าวันนี้</p>\n          </div>\n        </div>\n        {!dateTimeConfirmed ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Package className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>กรุณาเช็ควันเวลาก่อนกรอกข้อมูลวัตถุดิบ</p>\n          </div>\n        ) : (\n          <IngredientEntryForm ingredients={ingredients} onSubmit={handleIngredientSubmit} />\n        )}\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                3\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold\">พยากรณ์ความต้องการวันนี้</h2>\n                <p className=\"text-sm text-muted-foreground\">ดูข้อมูลพยากรณ์เพื่อวางแผนการผลิต</p>\n              </div>\n            </div>\n            <ForecastChart data={forecastData} currentHour={new Date().getHours().toString()} />\n          </Card>\n        </div>\n        <div className=\"space-y-6\">\n          <AlertList alerts={alerts} onDismiss={handleAlertDismiss} onAction={handleAlertAction} />\n          <ProductionRecommendation items={productionPlan} onStartProduction={handleProductionStart} />\n        </div>\n      </div>\n\n      <ForecastPanel selectedBranch={selectedBranchId} selectedDate={forecastDate} />\n\n      <HourlyCheckModal\n        open={showHourlyCheck}\n        onClose={() => setShowHourlyCheck(false)}\n        products={productsForHourlyCheck}\n        onSubmit={handleHourlyCheckSubmit}\n      />\n    </div>\n  );\n}\n","size_bytes":19210},"client/src/pages/ForecastImport.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, FileJson, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ForecastImport() {\n  const [jsonData, setJsonData] = useState(\"\");\n  const [parseError, setParseError] = useState(\"\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const importMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/forecasts/import\", \"POST\", data),\n    onSuccess: (response: any) => {\n      toast({\n        title: \"สำเร็จ\",\n        description: `นำเข้าข้อมูลการพยากรณ์ ${response.count} สาขาเรียบร้อยแล้ว`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/forecasts\"] });\n      setJsonData(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถนำเข้าข้อมูลได้\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const mockData = {\n    forecastDate: new Date().toISOString().split(\"T\")[0],\n    branches: [\n      {\n        branchId: \"1\",\n        branchName: \"สาขาสยาม\",\n        totalForecast: 450,\n        accuracy: 58.75,\n        products: [\n          { productCode: \"CRS\", productName: \"ครัวซองต์\", forecastQuantity: 120, minQuantity: 100, maxQuantity: 150, accuracy: 62.5, modelType: \"Hybrid\" },\n          { productCode: \"DNH\", productName: \"เดนิช\", forecastQuantity: 90, minQuantity: 70, maxQuantity: 110, accuracy: 55.2, modelType: \"ARIMA\" },\n          { productCode: \"BTK\", productName: \"บัตเตอร์เค้ก\", forecastQuantity: 80, minQuantity: 60, maxQuantity: 100, accuracy: 60.1, modelType: \"LSTM\" },\n          { productCode: \"DNT\", productName: \"โดนัท\", forecastQuantity: 100, minQuantity: 80, maxQuantity: 120, accuracy: 58.0, modelType: \"Hybrid\" },\n          { productCode: \"CKE\", productName: \"คุกกี้\", forecastQuantity: 60, minQuantity: 40, maxQuantity: 80, accuracy: 57.3, modelType: \"Prophet\" },\n        ],\n      },\n    ],\n  };\n\n  const handleLoadMock = () => {\n    setJsonData(JSON.stringify(mockData, null, 2));\n    setParseError(\"\");\n  };\n\n  const handleImport = () => {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (!data.forecastDate || !Array.isArray(data.branches)) {\n        setParseError(\"รูปแบบข้อมูลไม่ถูกต้อง: ต้องมี forecastDate และ branches\");\n        return;\n      }\n\n      for (const branch of data.branches) {\n        if (!branch.branchId || !branch.branchName || !Array.isArray(branch.products)) {\n          setParseError(\"รูปแบบข้อมูลสาขาไม่ถูกต้อง\");\n          return;\n        }\n      }\n\n      setParseError(\"\");\n      importMutation.mutate(data);\n    } catch (error) {\n      setParseError(`JSON ไม่ถูกต้อง: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">นำเข้าข้อมูลการพยากรณ์</h1>\n        <p className=\"text-sm text-muted-foreground\">นำเข้าข้อมูลจาก Hybrid Bakery Forecast System</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileJson className=\"w-5 h-5\" />\n              ข้อมูล JSON\n            </CardTitle>\n            <CardDescription>วางข้อมูล JSON ของการพยากรณ์</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Textarea\n              value={jsonData}\n              onChange={(e) => setJsonData(e.target.value)}\n              placeholder=\"วางข้อมูล JSON ที่นี่...\"\n              className=\"font-mono text-sm min-h-[400px]\"\n              data-testid=\"textarea-json-data\"\n            />\n\n            {parseError && (\n              <div className=\"flex items-start gap-2 p-3 bg-destructive/10 border border-destructive rounded-lg\">\n                <XCircle className=\"w-5 h-5 text-destructive flex-shrink-0 mt-0.5\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">เกิดข้อผิดพลาด</p>\n                  <p className=\"text-sm text-destructive/80\">{parseError}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleLoadMock}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"button-load-mock\"\n              >\n                โหลดข้อมูลตัวอย่าง\n              </Button>\n              <Button\n                onClick={handleImport}\n                disabled={!jsonData || importMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-import\"\n              >\n                {importMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    กำลังนำเข้า...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    นำเข้าข้อมูล\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>รูปแบบข้อมูล</CardTitle>\n            <CardDescription>ตัวอย่างโครงสร้างข้อมูล JSON ที่ถูกต้อง</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <pre className=\"text-xs overflow-auto max-h-[500px]\">\n                {JSON.stringify(\n                  {\n                    forecastDate: \"2025-10-06\",\n                    branches: [\n                      {\n                        branchId: \"1\",\n                        branchName: \"สาขาสยาม\",\n                        totalForecast: 450,\n                        accuracy: 58.75,\n                        products: [\n                          {\n                            productCode: \"CRS\",\n                            productName: \"ครัวซองต์\",\n                            forecastQuantity: 120,\n                            minQuantity: 100,\n                            maxQuantity: 150,\n                            accuracy: 62.5,\n                            modelType: \"Hybrid\",\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  null,\n                  2\n                )}\n              </pre>\n            </div>\n\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-sm\">ฟิลด์ที่จำเป็น:</h4>\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">forecastDate</Badge>\n                  <span className=\"text-xs text-muted-foreground\">วันที่พยากรณ์ (YYYY-MM-DD)</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">branches</Badge>\n                  <span className=\"text-xs text-muted-foreground\">รายการสาขา (array)</span>\n                </div>\n                <div className=\"flex items-center gap-2 ml-4\">\n                  <Badge variant=\"outline\" className=\"text-xs\">branchId</Badge>\n                  <span className=\"text-xs text-muted-foreground\">รหัสสาขา</span>\n                </div>\n                <div className=\"flex items-center gap-2 ml-4\">\n                  <Badge variant=\"outline\" className=\"text-xs\">branchName</Badge>\n                  <span className=\"text-xs text-muted-foreground\">ชื่อสาขา</span>\n                </div>\n                <div className=\"flex items-center gap-2 ml-4\">\n                  <Badge variant=\"outline\" className=\"text-xs\">products</Badge>\n                  <span className=\"text-xs text-muted-foreground\">รายการสินค้า (array)</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9303},"client/src/pages/HourlyCheck.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Clock, TrendingDown, TrendingUp, CheckCircle } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Product {\n  id: string;\n  name: string;\n  systemQuantity: number;\n  lastCheck?: string;\n}\n\ninterface HourlyCheckProps {\n  selectedBranchId: string;\n}\n\nexport default function HourlyCheck({ selectedBranchId }: HourlyCheckProps) {\n  const [counts, setCounts] = useState<Record<string, number>>({});\n  const [submitted, setSubmitted] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: productStock, isLoading } = useQuery({\n    queryKey: [\"/api/products/stock\", selectedBranchId],\n    queryFn: () => api.getProductStock(selectedBranchId),\n  });\n\n  useEffect(() => {\n    if (productStock) {\n      const initialCounts = productStock.reduce(\n        (acc: Record<string, number>, p: Product) => ({ ...acc, [p.id]: p.systemQuantity }),\n        {}\n      );\n      setCounts(initialCounts);\n    }\n  }, [productStock]);\n\n  const submitMutation = useMutation({\n    mutationFn: (checks: any[]) => api.submitHourlyCheck(selectedBranchId, checks),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products/stock\", selectedBranchId] });\n      setSubmitted(true);\n      toast({\n        title: \"บันทึกสำเร็จ\",\n        description: \"บันทึกการตรวจนับสต๊อกเรียบร้อยแล้ว\",\n      });\n      setTimeout(() => setSubmitted(false), 3000);\n    },\n    onError: () => {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถบันทึกการตรวจนับได้\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    const checks = Object.entries(counts).map(([productId, actualCount]) => ({\n      productId,\n      actualCount,\n    }));\n    submitMutation.mutate(checks);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">ตรวจนับสต๊อกรายชั่วโมง</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              ตรวจนับสต๊อกเบเกอรี่เพื่อแนะนำโปรโมชั่นและปรับปรุงสต๊อก\n            </p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"p-6\">\n              <Skeleton className=\"h-24 w-full\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">ตรวจนับสต๊อกรายชั่วโมง</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            ตรวจนับสต๊อกเบเกอรี่เพื่อแนะนำโปรโมชั่นและปรับปรุงสต๊อก\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          {new Date().toLocaleTimeString(\"th-TH\", { hour: \"2-digit\", minute: \"2-digit\" })}\n        </Badge>\n      </div>\n\n      {submitted && (\n        <Card className=\"p-4 bg-success/10 border-success\">\n          <div className=\"flex items-center gap-2 text-success\">\n            <CheckCircle className=\"h-5 w-5\" />\n            <p className=\"font-medium\">บันทึกการตรวจนับสำเร็จ</p>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {(productStock || []).map((product: Product) => {\n          const counted = counts[product.id] || 0;\n          const variance = counted - product.systemQuantity;\n          return (\n            <Card key={product.id} className=\"p-6\" data-testid={`card-product-${product.id}`}>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold\">{product.name}</h3>\n                  {variance !== 0 && (\n                    <Badge\n                      variant={variance < 0 ? \"destructive\" : \"secondary\"}\n                      className=\"gap-1\"\n                    >\n                      {variance > 0 ? (\n                        <TrendingUp className=\"h-3 w-3\" />\n                      ) : (\n                        <TrendingDown className=\"h-3 w-3\" />\n                      )}\n                      {variance > 0 ? \"+\" : \"\"}\n                      {variance}\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    ในระบบ:{\" \"}\n                    <span className=\"font-mono font-medium text-foreground\">\n                      {product.systemQuantity}\n                    </span>{\" \"}\n                    ชิ้น\n                  </div>\n                  {product.lastCheck && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      ตรวจล่าสุด: {product.lastCheck}\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor={`count-${product.id}`}>นับได้จริง</Label>\n                  <Input\n                    id={`count-${product.id}`}\n                    type=\"number\"\n                    value={counted}\n                    onChange={(e) =>\n                      setCounts({ ...counts, [product.id]: parseInt(e.target.value) || 0 })\n                    }\n                    className=\"font-mono text-lg\"\n                    data-testid={`input-count-${product.id}`}\n                  />\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Card className=\"p-6\">\n        <Button \n          onClick={handleSubmit} \n          className=\"w-full\" \n          size=\"lg\" \n          data-testid=\"button-submit-check\"\n          disabled={submitMutation.isPending}\n        >\n          {submitMutation.isPending ? \"กำลังบันทึก...\" : \"บันทึกการตรวจนับทั้งหมด\"}\n        </Button>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7153},"client/src/pages/IngredientManagement.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Search, ArrowUpDown, Package, Calendar } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface IngredientStock {\n  id: string;\n  name: string;\n  quantity: number;\n  unit: string;\n  expiryDate: string;\n  batchNumber?: string;\n  daysUntilExpiry: number;\n}\n\ninterface IngredientManagementProps {\n  selectedBranchId: string;\n}\n\nexport default function IngredientManagement({ selectedBranchId }: IngredientManagementProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: stock, isLoading, error } = useQuery({\n    queryKey: [\"/api/ingredients/stock\", selectedBranchId],\n    queryFn: () => api.getIngredientStock(selectedBranchId),\n  });\n\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถโหลดข้อมูลวัตถุดิบได้\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  const getExpiryBadge = (days: number) => {\n    if (days <= 1) return { variant: \"destructive\" as const, text: \"หมดอายุวันนี้\" };\n    if (days <= 3) return { variant: \"destructive\" as const, text: `${days} วัน` };\n    if (days <= 7) return { variant: \"default\" as const, text: `${days} วัน` };\n    return { variant: \"secondary\" as const, text: `${days} วัน` };\n  };\n\n  const filteredStock = (stock || []).filter((item: IngredientStock) =>\n    item.name && item.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">จัดการวัตถุดิบ</h1>\n        <p className=\"text-sm text-muted-foreground\">ตรวจสอบและจัดการสต๊อกวัตถุดิบ</p>\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"ค้นหาวัตถุดิบ...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-ingredient\"\n            />\n          </div>\n          <Button variant=\"outline\" data-testid=\"button-sort\">\n            <ArrowUpDown className=\"h-4 w-4 mr-2\" />\n            เรียงตาม\n          </Button>\n        </div>\n\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>วัตถุดิบ</TableHead>\n                <TableHead>จำนวน</TableHead>\n                <TableHead>วันหมดอายุ</TableHead>\n                <TableHead>เหลือเวลา</TableHead>\n                <TableHead>เลขแบตช์</TableHead>\n                <TableHead>การดำเนินการ</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <TableRow key={i}>\n                    <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-28\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-5 w-16\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-8 w-24\" /></TableCell>\n                  </TableRow>\n                ))\n              ) : filteredStock.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    <Package className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>ไม่พบวัตถุดิบ</p>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredStock.map((item: IngredientStock) => {\n                  const expiryBadge = getExpiryBadge(item.daysUntilExpiry);\n                  return (\n                    <TableRow key={item.id} data-testid={`row-ingredient-${item.id}`}>\n                      <TableCell className=\"font-medium\">{item.name}</TableCell>\n                      <TableCell className=\"font-mono\">\n                        {item.quantity} {item.unit}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          {new Date(item.expiryDate).toLocaleDateString(\"th-TH\")}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={expiryBadge.variant}>{expiryBadge.text}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {item.batchNumber || \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-use-${item.id}`}>\n                            ใช้\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-adjust-${item.id}`}>\n                            ปรับ\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6532},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AlertList.tsx":{"content":"import { AlertList } from \"../AlertList\";\nimport { useState } from \"react\";\n\nexport default function AlertListExample() {\n  const [alerts, setAlerts] = useState([\n    {\n      id: \"1\",\n      type: \"critical\" as const,\n      message: \"แป้งขนมปังจะหมดอายุวันนี้ (5 กก.)\",\n      timestamp: \"10 นาทีที่แล้ว\",\n      actionLabel: \"ดูรายละเอียด\",\n    },\n    {\n      id: \"2\",\n      type: \"warning\" as const,\n      message: \"นมสดเหลือน้อย (2 ลิตร) - ควรสั่งเพิ่ม\",\n      timestamp: \"30 นาทีที่แล้ว\",\n      actionLabel: \"สั่งซื้อ\",\n    },\n    {\n      id: \"3\",\n      type: \"info\" as const,\n      message: \"ถึงเวลาตรวจเช็คสต๊อกชั่วโมง 14:00\",\n      timestamp: \"5 นาทีที่แล้ว\",\n      actionLabel: \"ตรวจเช็คเลย\",\n    },\n    {\n      id: \"4\",\n      type: \"warning\" as const,\n      message: \"เนยสดจะหมดอายุใน 2 วัน (3 กก.)\",\n      timestamp: \"1 ชั่วโมงที่แล้ว\",\n    },\n  ]);\n\n  const handleDismiss = (id: string) => {\n    console.log(\"Dismiss alert:\", id);\n    setAlerts(alerts.filter((a) => a.id !== id));\n  };\n\n  const handleAction = (id: string) => {\n    console.log(\"Action triggered for alert:\", id);\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <AlertList\n        alerts={alerts}\n        onDismiss={handleDismiss}\n        onAction={handleAction}\n      />\n    </div>\n  );\n}\n","size_bytes":1643},"client/src/components/examples/BranchSelector.tsx":{"content":"import { BranchSelector } from \"../BranchSelector\";\nimport { useState } from \"react\";\n\nexport default function BranchSelectorExample() {\n  const [selectedBranch, setSelectedBranch] = useState(\"1\");\n\n  const mockBranches = [\n    { id: \"1\", name: \"สาขาสยาม\", location: \"สยามพารากอน\" },\n    { id: \"2\", name: \"สาขาอโศก\", location: \"เทอมินอล 21\" },\n    { id: \"3\", name: \"สาขาสีลม\", location: \"ซิลม คอมเพล็กซ์\" },\n    { id: \"4\", name: \"สาขาเซ็นทรัล\", location: \"เซ็นทรัลเวิลด์\" },\n  ];\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <BranchSelector\n        branches={mockBranches}\n        selectedBranchId={selectedBranch}\n        onSelect={(id) => {\n          setSelectedBranch(id);\n          console.log(\"Selected branch:\", id);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":940},"client/src/components/examples/DateTimePicker.tsx":{"content":"import { DateTimePicker } from \"../DateTimePicker\";\n\nexport default function DateTimePickerExample() {\n  const currentDate = new Date().toISOString().split(\"T\")[0];\n  const currentTime = new Date().toTimeString().slice(0, 5);\n\n  const handleConfirm = (date: string, time: string) => {\n    console.log(\"Confirmed date and time:\", { date, time });\n  };\n\n  const handleCancel = () => {\n    console.log(\"Cancelled\");\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <DateTimePicker\n        currentDate={currentDate}\n        currentTime={currentTime}\n        onConfirm={handleConfirm}\n        onCancel={handleCancel}\n      />\n    </div>\n  );\n}\n","size_bytes":653},"client/src/components/examples/ForecastChart.tsx":{"content":"import { ForecastChart } from \"../ForecastChart\";\n\nexport default function ForecastChartExample() {\n  const mockData = [\n    { hour: \"08:00\", predicted: 45, actual: 42 },\n    { hour: \"09:00\", predicted: 65, actual: 68 },\n    { hour: \"10:00\", predicted: 85, actual: 82 },\n    { hour: \"11:00\", predicted: 95, actual: 90 },\n    { hour: \"12:00\", predicted: 120, actual: 115 },\n    { hour: \"13:00\", predicted: 100, actual: 105 },\n    { hour: \"14:00\", predicted: 75 },\n    { hour: \"15:00\", predicted: 60 },\n    { hour: \"16:00\", predicted: 80 },\n    { hour: \"17:00\", predicted: 95 },\n    { hour: \"18:00\", predicted: 70 },\n  ];\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <ForecastChart data={mockData} currentHour=\"14:00\" />\n    </div>\n  );\n}\n","size_bytes":750},"client/src/components/examples/HourlyCheckModal.tsx":{"content":"import { HourlyCheckModal } from \"../HourlyCheckModal\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function HourlyCheckModalExample() {\n  const [open, setOpen] = useState(false);\n\n  const mockProducts = [\n    { id: \"1\", name: \"ครัวซองต์\", systemQuantity: 25 },\n    { id: \"2\", name: \"เดนิช\", systemQuantity: 18 },\n    { id: \"3\", name: \"บัตเตอร์เค้ก\", systemQuantity: 32 },\n    { id: \"4\", name: \"โดนัท\", systemQuantity: 40 },\n    { id: \"5\", name: \"คุกกี้\", systemQuantity: 55 },\n    { id: \"6\", name: \"แซนด์วิช\", systemQuantity: 12 },\n  ];\n\n  const handleSubmit = (checks: any[]) => {\n    console.log(\"Hourly check submitted:\", checks);\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <Button onClick={() => setOpen(true)} data-testid=\"button-open-modal\">\n        เปิดหน้าต่างตรวจนับ\n      </Button>\n      <HourlyCheckModal\n        open={open}\n        onClose={() => setOpen(false)}\n        products={mockProducts}\n        onSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n","size_bytes":1170},"client/src/components/examples/IngredientEntryForm.tsx":{"content":"import { IngredientEntryForm } from \"../IngredientEntryForm\";\n\nexport default function IngredientEntryFormExample() {\n  const mockIngredients = [\n    { id: \"1\", name: \"แป้งขนมปัง\", unit: \"กก.\" },\n    { id: \"2\", name: \"นมสด\", unit: \"ลิตร\" },\n    { id: \"3\", name: \"เนยสด\", unit: \"กก.\" },\n    { id: \"4\", name: \"ไข่ไก่\", unit: \"ฟอง\" },\n    { id: \"5\", name: \"น้ำตาล\", unit: \"กก.\" },\n    { id: \"6\", name: \"เกลือ\", unit: \"กรัม\" },\n  ];\n\n  const handleSubmit = (entries: any[], type: \"yesterday\" | \"today\") => {\n    console.log(`Submitting ${type} entries:`, entries);\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <IngredientEntryForm ingredients={mockIngredients} onSubmit={handleSubmit} />\n    </div>\n  );\n}\n","size_bytes":826},"client/src/components/examples/ProductionRecommendation.tsx":{"content":"import { ProductionRecommendation } from \"../ProductionRecommendation\";\n\nexport default function ProductionRecommendationExample() {\n  const mockItems = [\n    {\n      id: \"1\",\n      name: \"ครัวซองต์\",\n      currentStock: 15,\n      forecastDemand: 45,\n      suggestedProduction: 35,\n      ingredientsAvailable: true,\n      shelfLifeHours: 8,\n    },\n    {\n      id: \"2\",\n      name: \"เดนิช\",\n      currentStock: 8,\n      forecastDemand: 30,\n      suggestedProduction: 25,\n      ingredientsAvailable: true,\n      shelfLifeHours: 12,\n    },\n    {\n      id: \"3\",\n      name: \"บัตเตอร์เค้ก\",\n      currentStock: 20,\n      forecastDemand: 28,\n      suggestedProduction: 10,\n      ingredientsAvailable: false,\n      shelfLifeHours: 24,\n    },\n  ];\n\n  const handleStartProduction = (plan: any[]) => {\n    console.log(\"Starting production:\", plan);\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <ProductionRecommendation items={mockItems} onStartProduction={handleStartProduction} />\n    </div>\n  );\n}\n","size_bytes":1061},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard } from \"../StatCard\";\nimport { Package, AlertTriangle, CheckCircle, TrendingUp } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 p-6 bg-background\">\n      <StatCard\n        title=\"วัตถุดิบคงเหลือ\"\n        value=\"87\"\n        icon={Package}\n        trend=\"+5 จากเมื่อวาน\"\n        status=\"success\"\n      />\n      <StatCard\n        title=\"ใกล้หมดอายุ\"\n        value=\"12\"\n        icon={AlertTriangle}\n        trend=\"ภายใน 3 วัน\"\n        status=\"warning\"\n      />\n      <StatCard\n        title=\"เบเกอรี่วันนี้\"\n        value=\"245\"\n        icon={CheckCircle}\n        trend=\"85% ของเป้าหมาย\"\n        status=\"success\"\n      />\n      <StatCard\n        title=\"ยอดขาย\"\n        value=\"45,200\"\n        icon={TrendingUp}\n        trend=\"+12% จากเมื่อวาน\"\n        status=\"default\"\n      />\n    </div>\n  );\n}\n","size_bytes":1085},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../ThemeToggle\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4 bg-background\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":282},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/TodayForecast.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Sparkles, TrendingUp, Package, Clock, Percent, AlertTriangle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { th } from \"date-fns/locale\";\n\ninterface TodayForecastProps {\n  selectedBranchId: string;\n}\n\ninterface ProductForecastWithStock {\n  productName: string;\n  productCode: string | null;\n  forecastQuantity: number;\n  minQuantity: number | null;\n  maxQuantity: number | null;\n  currentStock: number;\n  hoursOnShelf: number;\n  needsPromotion: boolean;\n  shelfLifeHours: number;\n  accuracy: string | null;\n  modelType: string | null;\n}\n\ninterface TodayForecastData {\n  date: string;\n  branchId: string;\n  branchName: string;\n  totalForecast: number;\n  accuracy: string | null;\n  products: ProductForecastWithStock[];\n}\n\nexport default function TodayForecast({ selectedBranchId }: TodayForecastProps) {\n  const { data: forecastData, isLoading } = useQuery<TodayForecastData>({\n    queryKey: [\"/api/today-forecast\", selectedBranchId],\n    queryFn: async () => {\n      const response = await fetch(`/api/today-forecast/${selectedBranchId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch forecast\");\n      return response.json();\n    },\n  });\n\n  const today = new Date();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5 animate-pulse\" />\n              กำลังโหลดข้อมูล...\n            </CardTitle>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  const promotionProducts = forecastData?.products.filter((p) => p.needsPromotion) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Sparkles className=\"w-6 h-6 text-primary\" />\n          พยากรณ์ความต้องการ (วันนี้)\n        </h1>\n        <p className=\"text-sm text-muted-foreground\">\n          {format(today, \"d MMMM yyyy\", { locale: th })}\n        </p>\n      </div>\n\n      {promotionProducts.length > 0 && (\n        <Alert className=\"border-orange-500 bg-orange-50 dark:bg-orange-950/20\">\n          <AlertTriangle className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n          <AlertDescription className=\"text-orange-800 dark:text-orange-200\">\n            <strong>แจ้งเตือนโปรโมชั่น:</strong> มีสินค้า {promotionProducts.length} รายการที่อยู่บน shelf เกิน 3 ชั่วโมง ควรทำโปรโมชั่น\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardDescription>ยอดพยากรณ์รวม</CardDescription>\n            <CardTitle className=\"text-3xl\" data-testid=\"text-total-forecast\">\n              {forecastData?.totalForecast || 0}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n              <TrendingUp className=\"w-3 h-3\" />\n              ชิ้นทั้งหมด\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardDescription>ความแม่นยำ</CardDescription>\n            <CardTitle className=\"text-3xl\" data-testid=\"text-accuracy\">\n              {forecastData?.accuracy ? `${parseFloat(forecastData.accuracy).toFixed(1)}%` : \"N/A\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n              <Percent className=\"w-3 h-3\" />\n              จากการพยากรณ์ก่อนหน้า\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardDescription>สินค้าต้องโปรโมชั่น</CardDescription>\n            <CardTitle className=\"text-3xl text-orange-600 dark:text-orange-400\" data-testid=\"text-promotion-count\">\n              {promotionProducts.length}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n              <AlertTriangle className=\"w-3 h-3\" />\n              บน shelf เกิน 3 ชม.\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>รายการสินค้าที่พยากรณ์</CardTitle>\n          <CardDescription>\n            แสดงจำนวนที่พยากรณ์และสถานะโปรโมชั่น\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {forecastData && forecastData.products.length > 0 ? (\n              forecastData.products.map((product, index) => (\n                <div\n                  key={index}\n                  className={`p-4 rounded-lg border ${\n                    product.needsPromotion\n                      ? \"border-orange-500 bg-orange-50 dark:bg-orange-950/20\"\n                      : \"bg-card\"\n                  }`}\n                  data-testid={`product-forecast-${index}`}\n                >\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h3 className=\"font-semibold\" data-testid={`text-product-name-${index}`}>\n                          {product.productName}\n                        </h3>\n                        {product.productCode && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {product.productCode}\n                          </Badge>\n                        )}\n                        {product.needsPromotion && (\n                          <Badge variant=\"destructive\" className=\"bg-orange-600 hover:bg-orange-700\">\n                            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                            ต้องทำโปรโมชั่น\n                          </Badge>\n                        )}\n                      </div>\n\n                      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-3 text-sm\">\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">จำนวนที่พยากรณ์</div>\n                          <div className=\"font-semibold font-mono\" data-testid={`text-forecast-quantity-${index}`}>\n                            {product.forecastQuantity} ชิ้น\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">ช่วงพยากรณ์</div>\n                          <div className=\"font-semibold font-mono text-xs\" data-testid={`text-forecast-range-${index}`}>\n                            {product.minQuantity !== null && product.maxQuantity !== null\n                              ? `${product.minQuantity} - ${product.maxQuantity} ชิ้น`\n                              : \"N/A\"}\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">สต็อคปัจจุบัน</div>\n                          <div className=\"font-semibold font-mono flex items-center gap-1\">\n                            <Package className=\"w-3 h-3\" />\n                            {product.currentStock} ชิ้น\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">อยู่บน shelf</div>\n                          <div className={`font-semibold font-mono flex items-center gap-1 ${\n                            product.needsPromotion ? \"text-orange-600 dark:text-orange-400\" : \"\"\n                          }`}>\n                            <Clock className=\"w-3 h-3\" />\n                            {product.hoursOnShelf.toFixed(1)} ชม.\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">อายุสินค้า</div>\n                          <div className=\"font-semibold text-xs\">\n                            {product.shelfLifeHours} ชั่วโมง\n                          </div>\n                        </div>\n                      </div>\n\n                      {product.needsPromotion && (\n                        <div className=\"mt-3 p-2 bg-orange-100 dark:bg-orange-900/30 rounded border border-orange-300 dark:border-orange-700\">\n                          <p className=\"text-xs text-orange-800 dark:text-orange-200 font-medium\">\n                            💡 คำแนะนำ: สินค้าอยู่บน shelf มา {product.hoursOnShelf.toFixed(1)} ชั่วโมงแล้ว \n                            ควรทำโปรโมชั่นลดราคาหรือแถมเพื่อช่วยขาย\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {product.modelType && (\n                    <div className=\"mt-2 flex items-center gap-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Model: {product.modelType}\n                      </Badge>\n                      {product.accuracy && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Accuracy: {parseFloat(product.accuracy).toFixed(1)}%\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Sparkles className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>ยังไม่มีข้อมูลพยากรณ์สำหรับวันนี้</p>\n                <p className=\"text-sm mt-1\">กรุณานำเข้าข้อมูลจาก Forecast Import</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11050},"server/import-forecast-today.ts":{"content":"import * as fs from 'fs';\nimport * as path from 'path';\n\ninterface ForecastItem {\n  Branch: string;\n  Product_Code: string;\n  Product: string;\n  Date: string;\n  Forecast: number;\n  Lower: number;\n  Upper: number;\n  \"Accuracy_%\": number;\n  Method: string;\n}\n\ninterface TransformedBranch {\n  branchId: string;\n  branchName: string;\n  totalForecast: number;\n  accuracy: number;\n  products: {\n    productCode: string;\n    productName: string;\n    forecastQuantity: number;\n    minQuantity: number;\n    maxQuantity: number;\n    accuracy: number;\n    modelType: string;\n  }[];\n}\n\nasync function transformAndImportForecast(jsonFilePath: string, targetDate: string) {\n  const rawData = fs.readFileSync(jsonFilePath, 'utf-8');\n  const forecastData: ForecastItem[] = JSON.parse(rawData);\n\n  const branchMap = new Map<string, TransformedBranch>();\n\n  for (const item of forecastData) {\n    const [branchId, branchName] = item.Branch.split(': ');\n\n    if (!branchMap.has(branchId)) {\n      branchMap.set(branchId, {\n        branchId,\n        branchName,\n        totalForecast: 0,\n        accuracy: 0,\n        products: [],\n      });\n    }\n\n    const branch = branchMap.get(branchId)!;\n    branch.totalForecast += item.Forecast;\n    \n    branch.products.push({\n      productCode: item.Product_Code,\n      productName: item.Product,\n      forecastQuantity: item.Forecast,\n      minQuantity: item.Lower,\n      maxQuantity: item.Upper,\n      accuracy: item[\"Accuracy_%\"],\n      modelType: item.Method,\n    });\n  }\n\n  const branches = Array.from(branchMap.values());\n  for (const branch of branches) {\n    const totalAccuracy = branch.products.reduce((sum: number, p) => sum + p.accuracy, 0);\n    branch.accuracy = parseFloat((totalAccuracy / branch.products.length).toFixed(2));\n  }\n\n  const transformedData = {\n    forecastDate: targetDate,\n    branches,\n  };\n\n  console.log(`\\n📊 สาขาทั้งหมด: ${branches.length}`);\n  console.log(`\\n📦 ตัวอย่างสาขา 3510:`);\n  const branch3510 = branches.find(b => b.branchId === '3510');\n  if (branch3510) {\n    console.log(`   - จำนวนสินค้า: ${branch3510.products.length}`);\n    console.log(`   - สินค้า: ${branch3510.products.map(p => p.productName).join(', ')}`);\n  }\n\n  const response = await fetch('http://localhost:5000/api/forecasts/import', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(transformedData),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to import: ${response.statusText}`);\n  }\n\n  const result = await response.json();\n  console.log(`✅ สำเร็จ! นำเข้าข้อมูลพยากรณ์ ${result.count} สาขาเรียบร้อยแล้ว`);\n  console.log(`📅 วันที่: ${targetDate}`);\n  \n  return result;\n}\n\nconst today = new Date().toISOString().split('T')[0];\nconst jsonPath = path.join(process.cwd(), 'attached_assets/Hybrid_Forecast_20250701_1759726961744.json');\n\nconsole.log(`🚀 เริ่มนำเข้าข้อมูลพยากรณ์สำหรับวันนี้: ${today}`);\n\ntransformAndImportForecast(jsonPath, today)\n  .then(() => {\n    console.log('✨ การนำเข้าเสร็จสมบูรณ์');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('❌ เกิดข้อผิดพลาด:', error);\n    process.exit(1);\n  });\n","size_bytes":3470},"server/import-forecast.ts":{"content":"import * as fs from 'fs';\nimport * as path from 'path';\n\ninterface ForecastItem {\n  Branch: string;\n  Product_Code: string;\n  Product: string;\n  Date: string;\n  Forecast: number;\n  Lower: number;\n  Upper: number;\n  \"Accuracy_%\": number;\n  Method: string;\n}\n\ninterface TransformedBranch {\n  branchId: string;\n  branchName: string;\n  totalForecast: number;\n  accuracy: number;\n  products: {\n    productCode: string;\n    productName: string;\n    forecastQuantity: number;\n    minQuantity: number;\n    maxQuantity: number;\n    accuracy: number;\n    modelType: string;\n  }[];\n}\n\nasync function transformAndImportForecast(jsonFilePath: string) {\n  const rawData = fs.readFileSync(jsonFilePath, 'utf-8');\n  const forecastData: ForecastItem[] = JSON.parse(rawData);\n\n  const branchMap = new Map<string, TransformedBranch>();\n  let forecastDate = '';\n\n  for (const item of forecastData) {\n    const [branchId, branchName] = item.Branch.split(': ');\n    \n    if (!forecastDate) {\n      forecastDate = item.Date;\n    }\n\n    if (!branchMap.has(branchId)) {\n      branchMap.set(branchId, {\n        branchId,\n        branchName,\n        totalForecast: 0,\n        accuracy: 0,\n        products: [],\n      });\n    }\n\n    const branch = branchMap.get(branchId)!;\n    branch.totalForecast += item.Forecast;\n    \n    branch.products.push({\n      productCode: item.Product_Code,\n      productName: item.Product,\n      forecastQuantity: item.Forecast,\n      minQuantity: item.Lower,\n      maxQuantity: item.Upper,\n      accuracy: item[\"Accuracy_%\"],\n      modelType: item.Method,\n    });\n  }\n\n  const branches = Array.from(branchMap.values());\n  for (const branch of branches) {\n    const totalAccuracy = branch.products.reduce((sum: number, p) => sum + p.accuracy, 0);\n    branch.accuracy = parseFloat((totalAccuracy / branch.products.length).toFixed(2));\n  }\n\n  const transformedData = {\n    forecastDate,\n    branches,\n  };\n\n  const response = await fetch('http://localhost:5000/api/forecasts/import', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(transformedData),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to import: ${response.statusText}`);\n  }\n\n  const result = await response.json();\n  console.log(`✅ สำเร็จ! นำเข้าข้อมูลพยากรณ์ ${result.count} สาขาเรียบร้อยแล้ว`);\n  console.log(`📅 วันที่: ${forecastDate}`);\n  \n  return result;\n}\n\nconst jsonPath = path.join(process.cwd(), 'attached_assets/Hybrid_Forecast_20250701_1759726961744.json');\ntransformAndImportForecast(jsonPath)\n  .then(() => {\n    console.log('✨ การนำเข้าเสร็จสมบูรณ์');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('❌ เกิดข้อผิดพลาด:', error);\n    process.exit(1);\n  });\n","size_bytes":2901},"server/seed-db.ts":{"content":"import { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\n\nasync function seedDatabase() {\n  console.log(\"🌱 Starting database seeding...\");\n\n  const branches = [\n    { id: \"3510\", name: \"ชายหาดกมลา 1\", location: null },\n    { id: \"18469\", name: \"ราไวย์บีช\", location: null },\n    { id: \"18504\", name: \"ตลาดนัดสามกอง\", location: null },\n    { id: \"8732\", name: \"ราชพฤกษ์ (บางพลับ)\", location: null },\n    { id: \"15757\", name: \"The Bliss South Beach Patong\", location: null },\n    { id: \"9146\", name: \"หมู่บ้านพนาสนธิ์\", location: null },\n    { id: \"9922\", name: \"ศรีสุดา\", location: null },\n    { id: \"14555\", name: \"KARON AVENUE\", location: null },\n    { id: \"9641\", name: \"หมู่บ้านฉลองสุข\", location: null },\n    { id: \"13391\", name: \"ถนนเสน่หานุสรณ์\", location: null },\n  ];\n\n  console.log(\"📍 Seeding branches...\");\n  for (const branch of branches) {\n    await db.insert(schema.branches).values(branch).onConflictDoNothing();\n  }\n  console.log(`✅ Seeded ${branches.length} branches`);\n\n  const products = [\n    { name: \"ครัวซองต์\", imageUrl: null, shelfLifeHours: 8 },\n    { name: \"เดนิช\", imageUrl: null, shelfLifeHours: 12 },\n    { name: \"บัตเตอร์เค้ก\", imageUrl: null, shelfLifeHours: 24 },\n    { name: \"โดนัท\", imageUrl: null, shelfLifeHours: 16 },\n    { name: \"คุกกี้เนย\", imageUrl: null, shelfLifeHours: 72 },\n    { name: \"มัฟฟิน\", imageUrl: null, shelfLifeHours: 12 },\n    { name: \"เค้กไข่ไต้หวัน\", imageUrl: null, shelfLifeHours: 10 },\n    { name: \"ขนมปังปอนด์\", imageUrl: null, shelfLifeHours: 48 },\n  ];\n\n  console.log(\"🍞 Seeding bakery products...\");\n  for (const product of products) {\n    await db.insert(schema.bakeryProducts).values(product).onConflictDoNothing();\n  }\n  console.log(`✅ Seeded ${products.length} bakery products`);\n\n  const ingredients = [\n    { name: \"แป้งขนมปัง\", unit: \"กก.\", imageUrl: null },\n    { name: \"นมสด\", unit: \"ลิตร\", imageUrl: null },\n    { name: \"เนยสด\", unit: \"กก.\", imageUrl: null },\n    { name: \"ไข่ไก่\", unit: \"ฟอง\", imageUrl: null },\n    { name: \"น้ำตาล\", unit: \"กก.\", imageUrl: null },\n    { name: \"เกลือ\", unit: \"กรัม\", imageUrl: null },\n  ];\n\n  console.log(\"🥚 Seeding ingredients...\");\n  for (const ingredient of ingredients) {\n    await db.insert(schema.ingredients).values(ingredient).onConflictDoNothing();\n  }\n  console.log(`✅ Seeded ${ingredients.length} ingredients`);\n\n  console.log(\"✨ Database seeding complete!\");\n}\n\nseedDatabase()\n  .then(() => {\n    console.log(\"🎉 All done!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"❌ Seeding failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":3051},"server/import-data.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\nimport { db } from './db';\nimport * as schema from '@shared/schema';\n\nasync function importData() {\n  try {\n    const dataDir = path.join(process.cwd(), 'attached_assets', 'converted_files');\n\n    console.log('Starting data import...');\n\n    console.log('Importing product recipes...');\n    const recipesData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Ingredient_Report_1_SKU_Recipes.json'), 'utf-8')\n    );\n    await db.delete(schema.productRecipes);\n    const recipeValues = recipesData.map((item: any) => ({\n      sku: item.SKU,\n      shelfLifeDays: item.Shelf_Life_Days,\n      totalCost: item.Total_Cost.toString(),\n      ingredientCode: item.Ingredient_Code,\n      quantity: item.Quantity.toString(),\n      unit: item.Unit,\n      price: item.Price.toString(),\n      cost: item.Cost.toString(),\n      hasSubstitute: item.Has_Substitute,\n    }));\n    await db.insert(schema.productRecipes).values(recipeValues);\n    console.log(`✓ Imported ${recipesData.length} product recipes`);\n\n    console.log('Importing production plans...');\n    const productionPlansData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Optimization_2_Production_Plans.json'), 'utf-8')\n    );\n    await db.delete(schema.productionPlans);\n    const productionValues = productionPlansData.map((item: any) => ({\n      branch: item.Branch,\n      productCode: item.Product_Code.toString(),\n      product: item.Product,\n      forecast: item.Forecast,\n      optimalProduction: item.Optimal_Production,\n      adjustment: item.Adjustment,\n      reasoning: item.Reasoning,\n      shelfLifeDays: item.Shelf_Life_Days,\n      wasteRate: item.Waste_Rate.toString(),\n    }));\n    await db.insert(schema.productionPlans).values(productionValues);\n    console.log(`✓ Imported ${productionPlansData.length} production plans`);\n\n    console.log('Importing promotion recommendations...');\n    const promotionsData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Report_3_Promotion_Recommendations.json'), 'utf-8')\n    );\n    await db.delete(schema.promotionRecommendations);\n    const promotionValues = promotionsData.map((item: any) => ({\n      store: item.store,\n      productCode: item.product_code,\n      qtySold: item.qty_sold,\n      wasteQty: item.waste_qty,\n      wasteRate: item.waste_rate.toString(),\n      wasteCost: item.waste_cost.toString(),\n      totalVolume: item.total_volume,\n    }));\n    await db.insert(schema.promotionRecommendations).values(promotionValues);\n    console.log(`✓ Imported ${promotionsData.length} promotion recommendations`);\n\n    console.log('Importing dynamic pricing schedules...');\n    const pricingData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Optimization_1_Dynamic_Pricing_Schedule.json'), 'utf-8')\n    );\n    await db.delete(schema.dynamicPricingSchedules);\n    const pricingValues = pricingData.map((item: any) => ({\n      branch: item.Branch,\n      productCode: item.Product_Code.toString(),\n      product: item.Product,\n      forecastQty: item.Forecast_Qty,\n      time: item.Time,\n      discountPercent: item['Discount_%'],\n      action: item.Action,\n      reason: item.Reason,\n      priority: item.Priority,\n      wasteRate: item.Waste_Rate.toString(),\n    }));\n    await db.insert(schema.dynamicPricingSchedules).values(pricingValues);\n    console.log(`✓ Imported ${pricingData.length} dynamic pricing schedules`);\n\n    console.log('Importing shelf life alerts...');\n    const alertsData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Optimization_3_Shelf_Life_Alerts.json'), 'utf-8')\n    );\n    await db.delete(schema.shelfLifeAlerts);\n    const alertValues = alertsData.map((item: any) => ({\n      branch: item.Branch,\n      product: item.Product,\n      productCode: item.Product_Code.toString(),\n      shelfLife: item.Shelf_Life,\n      time: item.Time,\n      alertType: item.Alert_Type,\n      message: item.Message,\n      action: item.Action,\n      urgency: item.Urgency,\n    }));\n    await db.insert(schema.shelfLifeAlerts).values(alertValues);\n    console.log(`✓ Imported ${alertsData.length} shelf life alerts`);\n\n    console.log('Importing daily action plans...');\n    const actionPlansData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Optimization_4_Daily_Action_Plan.json'), 'utf-8')\n    );\n    await db.delete(schema.dailyActionPlans);\n    const actionValues = actionPlansData.map((item: any) => ({\n      branch: item.Branch,\n      product: item.Product,\n      morningAction: item.Morning_Action,\n      afternoonAction: item.Afternoon_Action,\n      eveningAction: item.Evening_Action,\n      shelfLife: item.Shelf_Life,\n    }));\n    await db.insert(schema.dailyActionPlans).values(actionValues);\n    console.log(`✓ Imported ${actionPlansData.length} daily action plans`);\n\n    console.log('Importing branch waste analysis...');\n    const wasteAnalysisData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Report_2_Branch_Waste_Analysis.json'), 'utf-8')\n    );\n    await db.delete(schema.branchWasteAnalysis);\n    const wasteValues = wasteAnalysisData.map((item: any) => ({\n      store: item.store,\n      qtySold: item.qty_sold,\n      wasteQty: item.waste_qty,\n      wasteCost: item.waste_cost.toString(),\n      wasteRate: item.waste_rate.toString(),\n      totalVolume: item.total_volume,\n    }));\n    await db.insert(schema.branchWasteAnalysis).values(wasteValues);\n    console.log(`✓ Imported ${wasteAnalysisData.length} branch waste analysis records`);\n\n    console.log('Importing ingredient demand forecasts...');\n    const demandData = JSON.parse(\n      await fs.readFile(path.join(dataDir, 'Ingredient_Report_3_Demand_Forecast.json'), 'utf-8')\n    );\n    await db.delete(schema.ingredientDemandForecasts);\n    const demandValues = demandData.map((item: any) => ({\n      ingredientCode: item.Ingredient_Code,\n      totalDemand: item.Total_Demand.toString(),\n      unit: item.Unit,\n      numSkus: item.Num_SKUs,\n      numBranches: item.Num_Branches,\n      hasSubstitute: item.Has_Substitute,\n      numSubstitutes: item.Num_Substitutes,\n    }));\n    await db.insert(schema.ingredientDemandForecasts).values(demandValues);\n    console.log(`✓ Imported ${demandData.length} ingredient demand forecasts`);\n\n    console.log('\\n✅ Data import completed successfully!');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Error importing data:', error);\n    process.exit(1);\n  }\n}\n\nimportData();\n","size_bytes":6474},"client/src/pages/Optimization.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingUp, Clock, AlertCircle, Calendar } from \"lucide-react\";\nimport type {\n  ProductionPlan,\n  PromotionRecommendation,\n  DynamicPricingSchedule,\n  DailyActionPlan,\n} from \"@shared/schema\";\n\ninterface OptimizationProps {\n  selectedBranchId: string;\n}\n\nexport default function Optimization({ selectedBranchId }: OptimizationProps) {\n  const { data: productionPlans = [], isLoading: isLoadingPlans } = useQuery<ProductionPlan[]>({\n    queryKey: [\"/api/optimization/production-plans\", { branchId: selectedBranchId }],\n  });\n\n  const { data: promotions = [], isLoading: isLoadingPromotions } = useQuery<PromotionRecommendation[]>({\n    queryKey: [\"/api/optimization/promotions\", { branchId: selectedBranchId }],\n  });\n\n  const { data: pricingSchedules = [], isLoading: isLoadingPricing } = useQuery<DynamicPricingSchedule[]>({\n    queryKey: [\"/api/optimization/pricing-schedules\", { branchId: selectedBranchId }],\n  });\n\n  const { data: dailyActions = [], isLoading: isLoadingActions } = useQuery<DailyActionPlan[]>({\n    queryKey: [\"/api/optimization/daily-actions\", { branchId: selectedBranchId }],\n  });\n\n  if (isLoadingPlans || isLoadingPromotions || isLoadingPricing || isLoadingActions) {\n    return (\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-8 w-64\" />\n        <Skeleton className=\"h-96\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-optimization\">การเพิ่มประสิทธิภาพ</h1>\n        <p className=\"text-muted-foreground\">แผนการผลิต โปรโมชั่น และการกำหนดราคาแบบไดนามิก</p>\n      </div>\n\n      <Tabs defaultValue=\"production\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"production\" data-testid=\"tab-production\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            แผนการผลิต\n          </TabsTrigger>\n          <TabsTrigger value=\"promotions\" data-testid=\"tab-promotions\">\n            <AlertCircle className=\"h-4 w-4 mr-2\" />\n            โปรโมชั่น\n          </TabsTrigger>\n          <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            กำหนดราคา\n          </TabsTrigger>\n          <TabsTrigger value=\"actions\" data-testid=\"tab-actions\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            แผนประจำวัน\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"production\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>แผนการผลิตที่เหมาะสม</CardTitle>\n              <CardDescription>ปริมาณการผลิตที่แนะนำตามพยากรณ์และอัตราของเสีย</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {productionPlans.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\">ไม่มีข้อมูลแผนการผลิต</p>\n                ) : (\n                  productionPlans.map((plan) => (\n                    <Card key={plan.id} data-testid={`production-plan-${plan.id}`}>\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <CardTitle className=\"text-lg\">{plan.product}</CardTitle>\n                            <CardDescription>รหัส: {plan.productCode}</CardDescription>\n                          </div>\n                          <Badge variant={plan.adjustment === \"Reduce\" ? \"destructive\" : \"default\"}>\n                            {plan.adjustment}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2\">\n                        <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-muted-foreground\">พยากรณ์</p>\n                            <p className=\"font-semibold\">{plan.forecast} ชิ้น</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">ควรผลิต</p>\n                            <p className=\"font-semibold text-primary\">{plan.optimalProduction} ชิ้น</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">อัตราของเสีย</p>\n                            <p className=\"font-semibold\">{parseFloat(plan.wasteRate).toFixed(2)}%</p>\n                          </div>\n                        </div>\n                        <div className=\"pt-2 border-t\">\n                          <p className=\"text-sm text-muted-foreground\">เหตุผล:</p>\n                          <p className=\"text-sm\">{plan.reasoning}</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"promotions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>คำแนะนำโปรโมชั่น</CardTitle>\n              <CardDescription>สินค้าที่มีอัตราของเสียสูงควรทำโปรโมชั่น</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {promotions.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\">ไม่มีข้อมูลโปรโมชั่น</p>\n                ) : (\n                  promotions\n                    .sort((a, b) => parseFloat(b.wasteRate) - parseFloat(a.wasteRate))\n                    .map((promo) => (\n                      <Card key={promo.id} data-testid={`promotion-${promo.id}`}>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-semibold\">รหัสสินค้า: {promo.productCode}</h3>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-3 text-sm\">\n                                <div>\n                                  <p className=\"text-muted-foreground\">ขายได้</p>\n                                  <p className=\"font-semibold\">{promo.qtySold} ชิ้น</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">ของเสีย</p>\n                                  <p className=\"font-semibold text-destructive\">{promo.wasteQty} ชิ้น</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">อัตราของเสีย</p>\n                                  <p className=\"font-semibold\">{parseFloat(promo.wasteRate).toFixed(2)}%</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">ต้นทุนของเสีย</p>\n                                  <p className=\"font-semibold\">฿{parseFloat(promo.wasteCost).toFixed(2)}</p>\n                                </div>\n                              </div>\n                            </div>\n                            <Badge\n                              variant={parseFloat(promo.wasteRate) > 10 ? \"destructive\" : \"secondary\"}\n                              className=\"ml-4\"\n                            >\n                              {parseFloat(promo.wasteRate) > 10 ? \"ด่วน\" : \"ปกติ\"}\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pricing\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>ตารางการลดราคาแบบไดนามิก</CardTitle>\n              <CardDescription>กำหนดเวลาและอัตราส่วนลดตามช่วงเวลา</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pricingSchedules.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\">ไม่มีข้อมูลการกำหนดราคา</p>\n                ) : (\n                  pricingSchedules\n                    .sort((a, b) => a.priority - b.priority)\n                    .map((schedule) => (\n                      <Card key={schedule.id} data-testid={`pricing-${schedule.id}`}>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <h3 className=\"font-semibold\">{schedule.product}</h3>\n                                <Badge variant=\"outline\">{schedule.time}</Badge>\n                              </div>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-muted-foreground\">พยากรณ์</p>\n                                  <p className=\"font-semibold\">{schedule.forecastQty} ชิ้น</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">ส่วนลด</p>\n                                  <p className=\"font-semibold text-primary\">{schedule.discountPercent}%</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">การดำเนินการ</p>\n                                  <p className=\"font-semibold\">{schedule.action}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground\">ลำดับความสำคัญ</p>\n                                  <p className=\"font-semibold\">#{schedule.priority}</p>\n                                </div>\n                              </div>\n                              <div className=\"mt-3 p-2 bg-muted rounded-md\">\n                                <p className=\"text-sm\">{schedule.reason}</p>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"actions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>แผนการดำเนินการประจำวัน</CardTitle>\n              <CardDescription>กิจกรรมที่แนะนำสำหรับแต่ละช่วงเวลา</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {dailyActions.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\">ไม่มีข้อมูลแผนประจำวัน</p>\n                ) : (\n                  dailyActions.map((action) => (\n                    <Card key={action.id} data-testid={`action-${action.id}`}>\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-lg\">{action.product}</CardTitle>\n                          <Badge variant=\"outline\">อายุ {action.shelfLife} วัน</Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"bg-yellow-500/10 text-yellow-500 p-2 rounded-md\">\n                              <Clock className=\"h-4 w-4\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">เช้า (08:00-12:00)</p>\n                              <p className=\"text-sm text-muted-foreground\">{action.morningAction}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"bg-orange-500/10 text-orange-500 p-2 rounded-md\">\n                              <Clock className=\"h-4 w-4\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">บ่าย (12:00-17:00)</p>\n                              <p className=\"text-sm text-muted-foreground\">{action.afternoonAction}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"bg-blue-500/10 text-blue-500 p-2 rounded-md\">\n                              <Clock className=\"h-4 w-4\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">เย็น (17:00-20:00)</p>\n                              <p className=\"text-sm text-muted-foreground\">{action.eveningAction}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15236}},"version":1}